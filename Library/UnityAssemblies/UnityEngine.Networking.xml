<?xml version="1.0" encoding="utf-8"?>
<doc>
  <!-- Generated by uIntelliSense 1.4.3.0 -->
  <assembly>
    <name>UnityEngine.Networking</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.Networking.SpawnDelegate">
      <summary>Signature of spawn functions that are passed to NetworkClient.RegisterSpawnFunction(). This is optional, as in most cases RegisterPrefab will be used instead.</summary>
    </member>
    <member name="T:UnityEngine.Networking.UnSpawnDelegate">
      <summary>Delegate for a function which will handle destruction of objects created with NetworkServer.Spawn.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessageDelegate">
      <summary>The callback delegate used in message handler functions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.BasicResponse">
      <summary>JSON response for types that only require a basic indication of success.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.CreateMatchRequest">
      <summary>JSON object to request a UNET match creation.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.CreateMatchResponse">
      <summary>JSON response for a CreateMatchRequest. It contains all information necessdary to continue joining a match.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.CreateOrJoinMatchRequest">
      <summary>JSON object to join an ongoing match or to create a new one if it doesn't exist.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.DestroyMatchRequest">
      <summary>JSON object to request a UNET match destruction.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.DropConnectionRequest">
      <summary>JSON object to request a UNET match drop a client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.JoinMatchRequest">
      <summary>JSON object to request joining an existing UNET match.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.JoinMatchResponse">
      <summary>JSON response for a JoinMatchRequest. It contains all information necessdary to continue joining a match.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.ListMatchRequest">
      <summary>JSON object to request a list of UNET matches. This list is page based with a 1 index.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.ListMatchResponse">
      <summary>JSON response for a ListMatchRequest. It contains a list of matches that can be parsed through to describe a page of matches.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchDesc">
      <summary>A member contained in a ListMatchResponse.matches list. Each element describes an individual match.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchDirectConnectInfo">
      <summary>Class describing a client in a network match.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.MatchInfo">
      <summary>
        <para>Details about a UNET Matchmaker match.</para>
        <para>This is returned from UMatch.CreateMatch() and UMatch.JoinMatch().</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.NetworkMatch">
      <summary>A component for communicating with the UNET Matchmaking service.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.Request">
      <summary>Abstract base for requests, which includes common info in all requests.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.Response">
      <summary>Abstract class that contains shared accessors for any response.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Match.ResponseBase">
      <summary>A response object base.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.AddPlayerMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_ADD_PLAYER built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.EmptyMessage">
      <summary>A utility class to send a network message with no contents.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ErrorMessage">
      <summary>This is passed to handler functions registered for the SYSTEM_ERROR built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.IntegerMessage">
      <summary>A utility class to send simple network messages that only contain an integer.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.NotReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_NOT_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoMessage">
      <summary>Information about another participant in the same network game.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerListMessage">
      <summary>Internal UNET message for sending information about network peers to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReadyMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_READY built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage">
      <summary>This is passed to handler funtions registered for the SYSTEM_REMOVE_PLAYER built-in message.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.StringMessage">
      <summary>
        <para>This is a utility class for simple network messages that contain only a string.</para>
        <para>This example sends a message with the name of the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessToken">
      <summary>Access token used to authenticate a client session for the purposes of allowing or disallowing match operations requested by that client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.AppID">
      <summary>The AppID identifies the application on the Unity Cloud or UNET servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkAccessLevel">
      <summary>Describes the access levels granted to this client.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NetworkID">
      <summary>Network ID, used for match making.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.NodeID">
      <summary>The NodeID is the ID used in relay matches to track nodes in a network.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Types.SourceID">
      <summary>Identifies a specific game instance.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelQOS">
      <summary>Defines parameters of channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Channels">
      <summary>Class containing constants for default network channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientScene">
      <summary>
        <para>A client manager which contains non-instance centrict client information and functions.</para>
        <para>This contains static state like tracked local objects and prefab/spawner registrations. It also has the default message handlers used by clients when they registered none themselves. The manager handles adding/removing player objects to the game afer a client connection has been set as ready.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionConfig">
      <summary>This class defines parameters of connection between two peers, this definition includes various timeouts and sizes as well as channel configuration.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ConnectionSimulatorConfig">
      <summary>Create configuration for network simulator; You can use this class in editor and developer build only.</summary>
    </member>
    <member name="T:UnityEngine.Networking.GlobalConfig">
      <summary>Defines global paramters for network library.</summary>
    </member>
    <member name="T:UnityEngine.Networking.HostTopology">
      <summary>
        <para>Class defines network topology for host (socket opened by <see cref="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)" /> function). This topology defines: (1) how many connection with default config will be supported and (2) what will be special connections (connections with config different from default).</para>
        <para>Example: p2p game with 10 people in the room and connection to chat server, in this case it will be 10 default connection and one special.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter">
      <summary>FilterLog is a utility class that controls the level of logging generated by UNET clients and servers.</summary>
    </member>
    <member name="T:UnityEngine.Networking.MessageBase">
      <summary>
        <para>Network message classes should be derived from this class. These message classes can then be sent using the various Send functions of NetworkConnection, NetworkClient and NetworkServer.</para>
        <para>Public data fields of classes derived from MessageBase will be automatically serialized with the class. The virtual methods Serialize and Deserialize may be implemented by developers for precise control, but if they are not implemented, then implementations will be generated for them.In the example below, the methods have implementations, but if those methods were not implemented, the message would still be usable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MsgType">
      <summary>Container class for networking system built-in message types.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkAnimator">
      <summary>A component to synchronize Mecanim animation states for networked objects.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour">
      <summary>
        <para>Base class which should be inherited by scripts which contain networking functionality.</para>
        <para>This is a MonoBehaviour class so scripts which need to use the networking feature should inherit this class instead of MonoBehaviour. It allows you to invoke RPC/Commands and receive various callbacks.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBroadcastResult">
      <summary>A structure that contains data from a NetworkDiscovery server broadcast.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkClient">
      <summary>
        <para>High level UNET client.</para>
        <para>It can be used to connect to a high level UNET server instance (NetworkServer).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection">
      <summary>High level network connection.</summary>
    </member>
    <member name="T:UnityEngine.Networking.PacketStat">
      <summary>Structure used to track the number and size of packets of each packets type.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkCRC">
      <summary>
        <para>This class holds information about which networked scripts use which QoS channels for updates.</para>
        <para>This channel information is used to ensure that clients and servers are using compatible HLAPI script configurations.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkDiscovery">
      <summary>
        <para>The NetworkDiscovery component allows Unity games to find each other on a local network. It can broadcast presence and listen for broadcasts, and optionally join matching games using the NetworkManager.</para>
        <para>This component can run in server mode (by calling StartAsServer) where it broadcasts to other computers on the local network, or in client mode (by calling StartAsClient) where it listens for broadcasts from a server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkHash128">
      <summary>A 128 bit number used to represent assets in a networking context.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkIdentity">
      <summary>
        <para>A component used to add an object to the UNET networking system.</para>
        <para>The NetworkIdentity is used to synchronize information in the object with the network. Only the server should create instances of objects which have NetworkIdentity as otherwise they will not be properly connected to the system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkInstanceId">
      <summary>This is used to identify networked objects across all participants of a network. It is assigned at runtime by the server when an object is spawned.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyManager">
      <summary>
        <para>This is a specialized NetworkManager that includes a networked lobby.</para>
        <para>The lobby has slots that track the joined players, and a maximum player count that is enforced. It requires that the NetworkLobbyPlayer component be on the lobby player objects.NetworkLobbyManager is derived from NetworkManager, and so it implements many of the virtual functions provided by the NetworkManager class. To avoid accidentally replacing functionality of the NetworkLobbyManager, there are new virtual functions on the NetworkLobbyManager that begin with "OnLobby". These should be used on classes derived from NetworkLobbyManager instead of the virtual functions on NetworkManager.The OnLobby*() functions have empty implementations on the NetworkLobbyManager base class, so the base class functions do not have to be called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyPlayer">
      <summary>
        <para>This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system.</para>
        <para>The LobbyPrefab object of the NetworkLobbyManager must have this component on it. This component holds basic lobby player data required for the lobby to function. Game specific data for lobby players can be put in other components on the LobbyPrefab or in scripts derived from NetworkLobbyPlayer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManager">
      <summary>
        <para>The NetworkManager is a convenience class for the HLAPI for managing networking systems.</para>
        <para>For simple network applications the NetworkManager can be used to control the HLAPI. It provides simple ways to start and stop client and servers, to manage scenes, and has virtual functions that user code can use to implement handlers for network events. The NetworkManager deals with one client at a time. The example below shows a minimal network setup.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManagerHUD">
      <summary>
        <para>An extension for the NetworkManager that displays a default HUD for controlling the network state of the game.</para>
        <para>This component also shows useful internal state for the networking system in the inspector window of the editor. It allows users to view connections, networked objects, message handlers, and packet statistics. This information can be helpful when debugging networked games.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessage">
      <summary>The details of a network message received by a client or server on a network connection.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker">
      <summary>
        <para>Component that controls visibility of networked objects for players.</para>
        <para>Any object with this component on it will not be visible to players more than a (configurable) distance away.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkReader">
      <summary>
        <para>General purpose serializer for UNET (for reading byte arrays).</para>
        <para>This class works with NetworkWriter and is used for serializing data for UNet commands, RPC calls, events and low level messages.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSceneId">
      <summary>This is used to identify networked objects in a scene. These values are allocated in the editor and are persistent for the lifetime of the object in the scene.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServer">
      <summary>
        <para>High level network server.</para>
        <para>This class handles listening on a port and managing connections for clients that connect. It also handles game related features such as player management, observers, spawning and message handling.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkStartPosition">
      <summary>
        <para>This component is used to make a gameObject a starting position for spawning player objects in multiplayer games.</para>
        <para>This object's transform will be automatically registered and unregistered with the NetworkManager as a starting position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform">
      <summary>A component to synchronize the position of networked objects.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformChild">
      <summary>
        <para>A component to synchronize the position of child transforms of networked objects.</para>
        <para>There must be a NetworkTransform on the root object of the hierarchy. There can be multiple NetworkTransformChild components on an object. This does not use physics for synchronization, it simply synchronizes the localPosition and localRotation of the child transform and lerps towards the recieved values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformVisualizer">
      <summary>This is a helper component to help understand and debug networked movement synchronization with the NetworkTransform component.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransport">
      <summary>Low level (transport layer) API.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkWriter">
      <summary>General purpose serializer for UNET (for serializing data to byte arrays).</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerController">
      <summary>This represents a networked player.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncList``1">
      <summary>This is the base class for type-specific SyncList classes.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListBool">
      <summary>A list of booleans that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListFloat">
      <summary>A list of floats that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListInt">
      <summary>A list of integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListString">
      <summary>This is a list of strings that will be synchronized from the server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListStruct``1">
      <summary>
        <para>This class is used for lists of structs that are synchronized from the server to clients.</para>
        <para>To use SyncListStruct, derive a new class with your struct as the generic parameter.</para>
        <para>Serialization methods will be auto-generated for this new class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListUInt">
      <summary>A list of unsigned integers that will be synchronized from server to clients.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ChannelOption">
      <summary>An enumeration of the options that can be set on a network channel.</summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter.FilterLevel">
      <summary>Control how verbose the network log messages are.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkError">
      <summary>Possible transport layer erors.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkEventType">
      <summary>Type of events returned from Receive() function.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker.CheckMethod">
      <summary>Enumeration of methods to use to check proximity.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.AxisSyncMode">
      <summary>An axis or set of axis.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.CompressionSyncMode">
      <summary>How much to compress sync data.</summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.TransformSyncMode">
      <summary>How to synchronize an object's position.</summary>
    </member>
    <member name="T:UnityEngine.Networking.PlayerSpawnMethod">
      <summary>Enumeration of methods of where to spawn player objects in multiplayer games.</summary>
    </member>
    <member name="T:UnityEngine.Networking.QosType">
      <summary>Descibed allowed types of quality of service for channels.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ReactorModel">
      <summary>Define how unet will handle network io operation.</summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncList_1.Operation">
      <summary>The types of operations that can occur for SyncLists.</summary>
    </member>
    <member name="T:UnityEngine.Networking.Version">
      <summary>Enumeration of Networking versions.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients.</para>
        <para>A [Client] method returns immediately if NetworkClient.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on clients. This would redundant for [ClientRPC] functions, as being client-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Client] custom attribute, except that it does not generate a warning in the console if called on a server. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
        <para>This will make the explosion code only run when the trigger is hit on the client.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server.</para>
        <para>[ClientRPC] functions are called by user code on UNET servers, and then invoked on corresponding client objects on clients connected to the server. The arguments to the RPC call are seriialized across the network, so that the client function is invoked with the same values as the function on the server. These functios must begin with the prefix "Rpc".</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.CommandAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on the server by sending a command from a client.</para>
        <para>[Command] functions are invoked on the player object associated with a connection. This is setup in response to the "ready" message, by passing the player objec to the NetworkServer.PlayerIsReady() function. The arguments to the command call are seriialized across the network, so that the server function is invoked with the same values as the function on the client. These functions must begin with the prefix "Cmd".</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSettingsAttribute">
      <summary>This attribute is used to configure the network settings of scripts that are derived from the NetworkBehaviour base class.</summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers.</para>
        <para>A [Server] method returns immediately if NetworkServer.active is not true, and generates a warning on the console. This attribute can be put on member functions that are meant to be only called on server. This would redundant for [Command] functions, as being server-only is already enforced for them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers, but not generate warnings.</para>
        <para>This custom attribute is the same as the [Server] custom attribute, except that it does not generate a warning in the console if called on a client. This is useful to avoid spamming the console for functions that will be invoked by the engine, such as Update() or physics callbacks.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncEventAttribute">
      <summary>
        <para>This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the sserver.</para>
        <para>[SyncEvent] events are called by user code on UNET servers, and then invoked on corresponding client objects on clients connected to the server. The arguments to the Event call are seriialized across the network, so that the client event is invoked with the same values as the function on the server. These events must begin with the prefix "Event".</para>
        <para>SyncEvents allow networked actions to be propagated to other scripts attached to the object. In the example above, the Other class registers for the TakeDamage event on the DamageClass. When the event happens on the DamageClass on the server, the TakeDamage() method will be invoked on the Other class on the client object. This allows modular network aware systems to be created, that can be extended by new scripts that respond to the events generated by them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncVarAttribute">
      <summary>
        <para>[SyncVar] is an attribute that can be put on member variables of UNeBehaviour classes. These variables will have their values sychronized from the server to clients in the game that are in the ready state.</para>
        <para>Setting thje value of a [SyncVar] marks it as dirty, so it will be sent to clients at the end of the current frame. Only simple values can be marked as [SyncVars].</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.BasicResponse.#ctor">
      <summary>Constructor for response class.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.advertise">
      <summary>Bool to describe if the created match should be advertised.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.eloScore">
      <summary>The optional game defined Elo score for the client making the request. The Elo score is averaged against all clients in a match and that value is used to produce better search results when listing available matches. If the Elo is provided the result set will be ordered according to the magnitude of the absoloute value of the difference of the a client searching for a match and the network average for all clients in each match. If the Elo score is not provided (and therefore 0 for all matches) the Elo score will not affect the search results. Each game can calculate this value as they wish according to whatever scale is best for that game.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.matchAttributes">
      <summary>Match attributes describing game specific features for this match. Each attribute is a key/value pair of a string key with a long value. Each match may have up to 10 of these values. The game is free to use this as desired to assist in finding better match results when clients search for matches to join.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.name">
      <summary>Name of the match to create.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.password">
      <summary>Password for the match to create. Leave blank for no password. Cannot be null.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.privateAddress">
      <summary>The (optional) private network address for the client making the request. This is the local network available private address another client on the same network could use to connect directly to the client making the request and may be used to better connect multiple clients. If it is not supplied the networking layer will still be completely functional.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.publicAddress">
      <summary>The (optional) public network address for the client making the request. This is the internet available public address another client on the internet (but not the local network) could use to connect directly to the client making the request and may be used to better connect multiple clients. If it is not supplied the networking layer will still be completely functional.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchRequest.size">
      <summary>Max number of clients that may join the match to create, including the host.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateMatchRequest.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateMatchRequest.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateMatchRequest.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.accessTokenString">
      <summary>JSON encoding for the binary access token this client uses to authenticate its session for future commands.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.address">
      <summary>Network address to connect to in order to join the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.networkId">
      <summary>The network id for the match created.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.nodeId">
      <summary>NodeId for the requesting client in the created match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.port">
      <summary>Network port to connect to in order to join the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.CreateMatchResponse.usingRelay">
      <summary>If the match is hosted by a relay server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateMatchResponse.#ctor">
      <summary>Constructor for response class.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateMatchResponse.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.CreateOrJoinMatchRequest.#ctor">
      <summary>Constructor for CreateOrJoinMatchRequest class.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.DestroyMatchRequest.networkId">
      <summary>NetworkID of the match to destroy.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DestroyMatchRequest.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DestroyMatchRequest.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DestroyMatchRequest.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.DropConnectionRequest.networkId">
      <summary>NetworkID of the match the client to drop is in.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.DropConnectionRequest.nodeId">
      <summary>NodeID of the connection to drop.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DropConnectionRequest.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DropConnectionRequest.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.DropConnectionRequest.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchRequest.eloScore">
      <summary>The optional game defined Elo score for the client making the request. The Elo score is averaged against all clients in a match and that value is used to produce better search results when listing available matches. If the Elo is provided the result set will be ordered according to the magnitude of the absoloute value of the difference of the a client searching for a match and the network average for all clients in each match. If the Elo score is not provided (and therefore 0 for all matches) the Elo score will not affect the search results. Each game can calculate this value as they wish according to whatever scale is best for that game.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchRequest.networkId">
      <summary>NetworkID of the match to join.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchRequest.password">
      <summary>Password for the match to join. Leave blank for no password. Cannot be null.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchRequest.privateAddress">
      <summary>The (optional) private network address for the client making the request. This is the local network available private address another client on the same network could use to connect directly to the client making the request and may be used to better connect multiple clients. If it is not supplied the networking layer will still be completely functional.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchRequest.publicAddress">
      <summary>The (optional) public network address for the client making the request. This is the internet available public address another client on the internet (but not the local network) could use to connect directly to the client making the request and may be used to better connect multiple clients. If it is not supplied the networking layer will still be completely functional.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.JoinMatchRequest.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.JoinMatchRequest.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.JoinMatchRequest.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.accessTokenString">
      <summary>JSON encoding for the binary access token this client uses to authenticate its session for future commands.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.address">
      <summary>Network address to connect to in order to join the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.networkId">
      <summary>NetworkID of the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.nodeId">
      <summary>NodeID for the requesting client in the mach that it is joining.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.port">
      <summary>Network port to connect to in order to join the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.JoinMatchResponse.usingRelay">
      <summary>If the match is hosted by a relay server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.JoinMatchResponse.#ctor">
      <summary>Constructor for response class.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.JoinMatchResponse.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.eloScore">
      <summary>The optional game defined Elo score for the client making the request. The Elo score is averaged against all clients in a match and that value is used to produce better search results when listing available matches. If the Elo is provided the result set will be ordered according to the magnitude of the absoloute value of the difference of the a client searching for a match and the network average for all clients in each match. If the Elo score is not provided (and therefore 0 for all matches) the Elo score will not affect the search results. Each game can calculate this value as they wish according to whatever scale is best for that game.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.includePasswordMatches">
      <summary>Only return matches that have a password if this is true, only return matches without a password if this is false.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.matchAttributeFilterEqualTo">
      <summary>List of match attributes to filter against. This will filter down to matches that both have a name that contains the entire text string provided and the value specified in the filter is equal to the attribute value for the matching name. No additional wildcards are allowed in the name. A maximum of 10 filters can be specified between all 3 filter lists.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.matchAttributeFilterGreaterThan">
      <summary>List of match attributes to filter against. This will filter down to matches that both have a name that contains the entire text string provided and the value specified in the filter is greater than the attribute value for the matching name. No additional wildcards are allowed in the name. A maximum of 10 filters can be specified between all 3 filter lists.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.matchAttributeFilterLessThan">
      <summary>List of match attributes to filter against. This will filter down to matches that both have a name that contains the entire text string provided and the value specified in the filter is less than the attribute value for the matching name. No additional wildcards are allowed in the name. A maximum of 10 filters can be specified between all 3 filter lists.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.nameFilter">
      <summary>Name filter to apply to the match list.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.pageNum">
      <summary>1 based page number requested.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchRequest.pageSize">
      <summary>Number of results per page to be returned.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchRequest.#ctor">
      <summary>Class constructor.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchRequest.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchRequest.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.ListMatchResponse.matches">
      <summary>List of matches fitting the requested description.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchResponse.#ctor">
      <summary>Constructor for response class.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchResponse.#ctor">
      <summary>Constructor for response class.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.ListMatchResponse.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.averageEloScore">
      <summary>The optional game defined Elo score for the match as a whole. The Elo score is averaged against all clients in a match and that value is used to produce better search results when listing available matches. If the Elo is provided the result set will be ordered according to the magnitude of the absoloute value of the difference of the a client searching for a match and the network average for all clients in each match. If the Elo score is not provided (and therefore 0 for all matches) the Elo score will not affect the search results. Each game can calculate this value as they wish according to whatever scale is best for that game.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.currentSize">
      <summary>Current number of users connected to a match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.directConnectInfos">
      <summary>Direct connection info for network games; This is not required for games utilizing matchmaker.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.hostNodeId">
      <summary>The NodeID of the host in a matchmaker match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.isPrivate">
      <summary>Describes if this match is considered private.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.matchAttributes">
      <summary>Match attributes describing game specific features for this match. Each attribute is a key/value pair of a string key with a long value. Each match may have up to 10 of these values. The game is free to use this as desired to assist in finding better match results when clients search for matches to join.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.maxSize">
      <summary>Max number of users that may connect to a match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.name">
      <summary>Name of the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDesc.networkId">
      <summary>NetworkID of the match.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.MatchDesc.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchDirectConnectInfo.nodeId">
      <summary>NodeID of the client described in this direct connect info.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.accessToken">
      <summary>The binary access token this client uses to authenticate its session for future commands.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.address">
      <summary>IP address of the host of the match,.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.networkId">
      <summary>The unique ID of this match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.nodeId">
      <summary>NodeID for this member client in the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.port">
      <summary>Port of the host of the match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.MatchInfo.usingRelay">
      <summary>Flag to say if the math uses a relay server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.NetworkMatch.baseUri">
      <summary>The base URI of the UNET MatchMaker that this NetworkMatch will communicate with.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.CreateMatch(System.String,System.UInt32,System.Boolean,System.String)">
      <summary>
        <para>A match accessor to create a new match hosted on this client.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="matchName">Name of match to create.</param>
      <param name="matchSize">Maximum number of users in the match.</param>
      <param name="matchAdvertise">Flag to advertise this match in searches.</param>
      <param name="matchPassword">Password required to enter the match.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.CreateMatch(UnityEngine.Networking.Match.CreateMatchRequest)">
      <summary>
        <para>A match accessor to create a new match hosted on this client.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="req">A CreateMatchRequest describing the match to create.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DestroyMatch(UnityEngine.Networking.Types.NetworkID)">
      <summary>
        <para>Destroy a match (that this client owns) on the UNET Matchmaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="netId">Id of the match to destroy.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DestroyMatch(UnityEngine.Networking.Match.DestroyMatchRequest)">
      <summary>
        <para>Destroy a match (that this client owns) on the UNET Matchmaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="req">A CreateMatchRequest describing the match to destroy.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DropConnection(UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.NodeID)">
      <summary>
        <para>This causes a client to be dropped from a UNET Matchmaker match.</para>
        <para>Only the host can do this (?). This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="netId">Id of the match to drop from.</param>
      <param name="dropNodeId">NodeId of the client to drop.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.DropConnection(UnityEngine.Networking.Match.DropConnectionRequest)">
      <summary>
        <para>This causes a client to be dropped from a UNET Matchmaker match.</para>
        <para>Only the host can do this (?). This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="req">A DropConnectionRequest describing the match to destroy.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.JoinMatch(UnityEngine.Networking.Types.NetworkID,System.String)">
      <summary>
        <para>Join a match on the UNET Matchmaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="netId">Id of the match to join.</param>
      <param name="matchPassword">Password to join with.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.JoinMatch(UnityEngine.Networking.Match.JoinMatchRequest)">
      <summary>
        <para>Join a match on the UNET Matchmaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="req">A JoinMatchRequest describing the match to destroy.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.ListMatches(System.Int32,System.Int32,System.String)">
      <summary>
        <para>This requests a list of the active matches from a UNET MatchMaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="startPageNumber">First page of results.</param>
      <param name="resultPageSize">Number of matches in each page.</param>
      <param name="matchNameFilter">String to filter names on.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.ListMatches(UnityEngine.Networking.Match.ListMatchRequest)">
      <summary>
        <para>This requests a list of the active matches from a UNET MatchMaker.</para>
        <para>This is asynchronous, the callback function will be invoked when the operation completes.</para>
      </summary>
      <param name="req">A ListMatchRequest describing the match to destroy.</param>
      <returns>A coroutine for managing the async operation. if using the callback, this can be ignored.</returns>
    </member>
    <member name="M:UnityEngine.Networking.Match.NetworkMatch.SetProgramAppID(UnityEngine.Networking.Types.AppID)">
      <summary>Set this before calling any UNET functions. Must match AppID for this program from the Cloud API.</summary>
      <param name="programAppID">AppID that corresponds to the Cloud API AppID for this app.</param>
    </member>
    <member name="P:UnityEngine.Networking.Match.Request.accessTokenString">
      <summary>The JSON encoded binary access token this client uses to authenticate its session for future commands.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Request.appId">
      <summary>AppID for the current game, required in every request. This is generated from the Cloud API.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Request.domain">
      <summary>Domain for the request. All commands will be sandboxed to their own domain; For example no clients with domain 1 will see matches with domain 2. This can be used to prevent incompatible client versions from communicating.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Request.projectId">
      <summary>The Cloud Project Id for this game, required in every request. This is used to match games of the same type.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Request.sourceId">
      <summary>SourceID for the current client, required in every request. This is generated from the Cloud API.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Match.Request.version">
      <summary>Matchmaker protocol version info.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.Request.IsValid">
      <summary>Accessor to verify if the contained data is a valid request with respect to initialized variables and accepted parameters.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.Request.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Response.extendedInfo">
      <summary>Extended string information that is returned when the server encounters an error processing a request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.Match.Response.success">
      <summary>Bool describing if the request was successful.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Match.Response.ToString">
      <summary>Provides string description of current class data.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData">
      <summary>The extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize">
      <summary>The size of the extra message data included in the AddPlayerMessage.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId">
      <summary>
        <para>The playerId of the new player.</para>
        <para>This is specified by the client when he calls NetworkClient.AddPlayer(someId).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ErrorMessage.errorCode">
      <summary>
        <para>The error code.</para>
        <para>This is a value from the UNETError enumeration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.IntegerMessage.value">
      <summary>The integer value to serialize.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address">
      <summary>The IP address of the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId">
      <summary>The id of the NetworkConnection associated with the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost">
      <summary>True if this peer is the host of the network game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou">
      <summary>True if the peer if the same as the current client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port">
      <summary>The network port being used by the peer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.peers">
      <summary>The list of participants in a networked game.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId">
      <summary>
        <para>The player ID of the player object which should be removed.</para>
        <para>This is specified by the client when he calls NetworkClient.RemovePlayer(someId).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.StringMessage.value">
      <summary>The string that will be serialized.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessToken.array">
      <summary>Binary field for the actual token.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.GetByteString">
      <summary>Accessor to get an encoded string from the m_array data.</summary>
    </member>
    <member name="M:UnityEngine.Networking.Types.NetworkAccessToken.IsValid">
      <summary>Checks if the token is a valid set of data with respect to default values (returns true if the values are not default, does not validate the token is a current legitimate token with respect to the server's auth framework).</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.AppID.Invalid">
      <summary>Invalid AppID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Invalid">
      <summary>Invalid access level, signifying no access level has been granted/specified.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.User">
      <summary>User access level. This means you can do operations which affect yourself only, like disconnect yourself from the match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Owner">
      <summary>Access level Owner, generally granting access for operations key to the peer host server performing it's work.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkAccessLevel.Admin">
      <summary>Administration access level, generally describing clearence to perform game altering actions against anyone inside a particular match.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NetworkID.Invalid">
      <summary>Invalid NetworkID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.NodeID.Invalid">
      <summary>The invalid case of a NodeID.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Types.SourceID.Invalid">
      <summary>Invalid SourceID.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ChannelQOS.QOS">
      <summary>Channel quality of service.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor(UnityEngine.Networking.QosType)">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
      <param name="value">Requested type of quality of service (default Unreliable).</param>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ChannelQOS.#ctor(UnityEngine.Networking.ChannelQOS)">
      <summary>UnderlyingModel.MemDoc.MemDocModel.</summary>
      <param name="channel">Copy constructor.</param>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultReliable">
      <summary>The id of the default reliable channel used by the UNet HLAPI, This channel is used for state updates and spawning.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultUnreliable">
      <summary>The id of the default unreliable channel used for the UNet HLAPI. This channel is used for movement updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.localPlayers">
      <summary>A list of all players added to the game.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the client.</para>
        <para>The key of the dictionary is the NetworkIdentity netId of the objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.prefabs">
      <summary>
        <para>This is a dictionary of the prefabs that are registered on the client.</para>
        <para>The key to the dictionary is the prefab asset Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.ready">
      <summary>Return true when a client connection has been set as ready.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.readyConnection">
      <summary>
        <para>The NetworkConnection object that is currently "ready". This is the connection being used connect to the server where objects are spawned from.</para>
        <para>This connection can be used to send messages to the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.spawnableObjects">
      <summary>
        <para>This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.</para>
        <para>The key to the dictionary is the NetworkIdentity sceneId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The playerControllerId is the local player ID for the player, for example like which controller a player is using. This is not the global overall player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The playerControllerId is the local player ID for the player, for example like which controller a player is using. This is not the global overall player number.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(System.Int16)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
        <para>The playerControllerId is the local player ID for the player, for example like which controller a player is using. This is not the global overall player number.</para>
      </summary>
      <param name="playerControllerId">The local player ID number.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ClearSpawners">
      <summary>This clears the registered spawn prefabs and spawn handler functions for this client.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ConnectLocalServer">
      <summary>
        <para>Create and connect a local client instance to the local server.</para>
        <para>This client acts like normal remote client but internally all messages are routed directly to the server process.</para>
      </summary>
      <returns>A client object for communicating with the local server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.DestroyAllClientObjects">
      <summary>
        <para>Destroys all networked objects on the client.</para>
        <para>This can be used to clean up when a network connection is closed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.FindLocalObject(System.UInt32)">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game. This number is the same on the server and all connected clients for a particular object, so it can be used to identify objects across the network. The FindLocalObject() function is called on a client to transform a netId received from a server to a local game object.</para>
      </summary>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.Ready(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Signal that the client connection is ready to enter the game.</para>
        <para>This could be for example when a client enters an ongoing game and has finished loading the current scene. The server should respond to the SYSTEM_READY event with an appropriate handler which instantiates the players object for example.</para>
      </summary>
      <param name="conn">The client connection which is ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instanciate a corresponding client object with the same netId.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
        <para>When a NetworkIdentity object is spawned on a server with NetworkServer.SpawnObject(), and the prefab that the object was created from was registered with RegisterPrefab(), the client will use that prefab to instanciate a corresponding client object with the same netId.</para>
        <para>The optional custom spawn and un-spawn handler functions can be used to implement more advanced spawning strategies such as pbject pools.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterSpawnHandler(UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>This is an advanced spawning funciotn that registers a custom assetId with the UNET spawning system.</para>
        <para>This can be used to register custom spawning methods for an assetId - instead of the usual method of registering spawning methods for a prefab. This should be used when no prefab exists for the spawned objects - such as when they are constructed dynamically at runtime from configuration data.</para>
      </summary>
      <param name="assetId">Custom assetId string.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RemovePlayer(System.Int16)">
      <summary>
        <para>Remove the specified player ID from the game.</para>
        <para>Both the client and the server will destroy the player object and remove him from the player list.</para>
      </summary>
      <returns>Returns true if the player was successfully destoyed and removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetLocalObject(System.UInt32,UnityEngine.GameObject)">
      <summary>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game.</para>
        <para>This number is the same on the server and all connected clients for a particular object, so it can be used to identify objects across the network. The FindLocalObject() function is called on a client to transform a netId received from a server to a local game object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterPrefab(UnityEngine.GameObject)">
      <summary>Removes a registered spawn prefab.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterSpawnHandler(UnityEngine.Networking.NetworkHash128)">
      <summary>Removes a registered spawn handler function.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AckDelay">
      <summary>How long in ms receiver will wait before it will force send acknowledgements back without waiting any payload.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.AllCostTimeout">
      <summary>Defines timeout in ms after that message with AllCost deliver qos will force resend without acknowledgement waiting.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ChannelCount">
      <summary>Return amount of channels for current configuration.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.Channels">
      <summary>Allow access to channels list.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ConnectTimeout">
      <summary>Timeout in ms which library will wait before it will send another connection request.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.DisconnectTimeout">
      <summary>How long (in ms) library will wait before it will consider connection as disconnected.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.FragmentSize">
      <summary>What should be maximum fragment size (in Bytes) for fragmented messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.IsAcksLong">
      <summary>If it is true, connection will use 64 bit mask to acknowledge received reliable messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageCount">
      <summary>Maximum amount of small reliable messages which will combine in one "array of messages". Useful if you are going to send a lot of small reliable messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxCombinedReliableMessageSize">
      <summary>Maximum size of reliable message which library will consider as small and will try to combine in one "array of messages" message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxConnectionAttempt">
      <summary>How many attempt library will get before it will consider the connection as disconnected.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MaxSentMessageQueueSize">
      <summary>Defines maximum messages which will wait for sending before user will receive error on Send() call.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.MinUpdateTimeout">
      <summary>Minimal send update timeout (in ms) for connection. this timeout could be increased by library if flow control will required.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.NetworkDropThreshold">
      <summary>How many (in %) packet need to be dropped due network condition before library will throttle send rate.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.OverflowDropThreshold">
      <summary>How many (in %) packet need to be dropped due lack of internal bufferes before library will throttle send rate.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PacketSize">
      <summary>What is a maximum packet size (in Bytes) (including payload and all header). Packet can contain multiple messages inside.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.PingTimeout">
      <summary>Timeout in ms between control protocol messages.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ReducedPingTimeout">
      <summary>Timeout in ms for control messages which library will use before it will accumulate statistics.</summary>
    </member>
    <member name="P:UnityEngine.Networking.ConnectionConfig.ResendTimeout">
      <summary>Minimum timeout (in ms) which library will wait before it will resend reliable message.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.#ctor">
      <summary>Will create default connection config or will copy them from another.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.#ctor(UnityEngine.Networking.ConnectionConfig)">
      <summary>Will create default connection config or will copy them from another.</summary>
      <param name="config">Connection config.</param>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.GetChannel(System.Byte)">
      <summary>Return the QoS set for the given channel or throw an out of range exception.</summary>
      <param name="idx">Index in array.</param>
      <returns>Channel QoS.</returns>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionConfig.Validate(UnityEngine.Networking.ConnectionConfig)">
      <summary>Validate parameters of connection config. Will throw exceptions if parameters are incorrect.</summary>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionSimulatorConfig.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
      <summary>Will create object describing network simulation parameters.</summary>
      <param name="outMinDelay">Minimal simulation delay for outgoing traffic in ms.</param>
      <param name="outAvgDelay">Average simulation delay for outgoing traffic in ms.</param>
      <param name="inMinDelay">Minimal simulation delay for incoming traffic in ms.</param>
      <param name="inAvgDelay">Average simulation delay for incoming traffic in ms.</param>
      <param name="packetLossPercentage">Probability of packet loss 0 &lt;= p &lt;= 1.</param>
    </member>
    <member name="M:UnityEngine.Networking.ConnectionSimulatorConfig.Dispose">
      <summary>Destructor.</summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.MaxPacketSize">
      <summary>
        <para>Defines maximum possible packet size in bytes for all network connections.</para>
        <para>The packet size associated with specific connections must be lower than this value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumReceivedMessages">
      <summary>
        <para>Defines maximum amount of messages in the receive queue.</para>
        <para>Messages which exceed this limit will be dropped.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorMaximumSentMessages">
      <summary>
        <para>Defines maximum message count in sent queue.</para>
        <para>Messages which exceed this limit will be dropped and Send calls will return errors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ReactorModel">
      <summary>
        <para>Defines reactor model for the network library.</para>
        <para>With the select model, received packets will be handled as soon as they arrive. With the fixed rate model, incoming packets will only be handled periodically. The select model is good for non-mobile devices, where the battery life is not important. Fixed rate is not as CPU intensive and will save battery life on mobile devices but this decreases performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.GlobalConfig.ThreadAwakeTimeout">
      <summary>Defines (1) for select reactor, minimum time period, when system will check if there are any messages for send (2) for fixrate reactor, minimum interval of time, when system will check for sending and receiving messages.</summary>
    </member>
    <member name="M:UnityEngine.Networking.GlobalConfig.#ctor">
      <summary>Create new global config object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.DefaultConfig">
      <summary>Defines config for default connections in the topology.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.MaxDefaultConnections">
      <summary>Defines how many connection with default config be permitted.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.MessagePoolSizeGrowthFactor">
      <summary>Library keep and reuse internal pools of messages. By default they have size 128. If this value is not enough pools will be automatically increased. This value defines how they will increase. Default value is 0.75, so if original pool size was 128, the new pool size will be 128 * 1.75 = 224.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.ReceivedMessagePoolSize">
      <summary>What is the size of received messages pool (default 128 bytes).</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SentMessagePoolSize">
      <summary>Defines size of sent message pool (default value 128).</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigs">
      <summary>List of special connection configs.</summary>
    </member>
    <member name="P:UnityEngine.Networking.HostTopology.SpecialConnectionConfigsCount">
      <summary>Returns count of special connection added to topology.</summary>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.#ctor(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>Create topology.</summary>
      <param name="defaultConfig">Default config.</param>
      <param name="maxDefaultConnections">Maximum default connections.</param>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.AddSpecialConnectionConfig(UnityEngine.Networking.ConnectionConfig)">
      <summary>Add special connection to topology (for example if you need to keep connection to standalone chat server you will need to use this function). Returned id should be use as one of parameters (with ip and port) to establish connection to this server.</summary>
      <param name="config">Connection config for special connection.</param>
      <returns>Id of this connection, user should use this id when he calls <see cref="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)" />.</returns>
    </member>
    <member name="M:UnityEngine.Networking.HostTopology.GetSpecialConnectionConfig(System.Int32)">
      <summary>Return reference to special connection config. Parameters of this config can be changed.</summary>
      <param name="i">Config id.</param>
      <returns>Connection config.</returns>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.currentLogLevel">
      <summary>The current logging level that UNET is running with.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.currentLogLevel">
      <summary>The current logging level that UNET is running with.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Debug">
      <summary>Setting LogFilter.currentLogLevel to this will enable verbose debug logging.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Error">
      <summary>Setting LogFilter.currentLogLevel to this will error and above messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Info">
      <summary>Setting LogFilter.currentLogLevel to this will log only info and above messages. This is the default level.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logDebug">
      <summary>Checks if debug logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logError">
      <summary>Checks if error logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logInfo">
      <summary>Checks if info level logging is enabled.</summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logWarn">
      <summary>Checks if wanring level logging is enabled.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Warn">
      <summary>Setting LogFilter.currentLogLevel to this will log wanring and above messages.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
        <para>Developers may implement this method for precise control of serialization, but they do no have to. An implemenation of this method will be generated for derived classes.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AddPlayer">
      <summary>
        <para>Internal networking system message for adding player objects to client instances.</para>
        <para>This is sent to the server when a client calls NetworkClient.AddPlayer(). The server should have a handler for this message type to add the player object to the game and notify the client with NetworkServer.AddPlayer().</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Animation">
      <summary>
        <para>Internal networking system message for sending synchronizing animation state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationParameters">
      <summary>
        <para>Internal networking system message for sending synchronizing animation parameter state.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationTrigger">
      <summary>
        <para>Internal networking system message for sending animation triggers.</para>
        <para>Used by the NetworkAnimation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Command">
      <summary>Internal networking system message for sending a command from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Connect">
      <summary>Internal networking system message for communicating a connection has occurred.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.CRC">
      <summary>Internal networking system message for HLAPI CRC checking.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Disconnect">
      <summary>Internal networking system message for communicating a disconnect has occurred,.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Error">
      <summary>Internal networking system message for communicating an error.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Highest">
      <summary>The highest value of built-in networking system message ids. User messages must be above this value.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.InternalHighest">
      <summary>The highest value of internal networking system message ids. User messages must be above this value. User code cannot replace these handlers.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyAddPlayerFailed">
      <summary>Internal networking system message for communicating failing to add lobby player.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReadyToBegin">
      <summary>Internal networking system message for communicating a player is ready in the lobby.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReturnToLobby">
      <summary>Internal networking system messages used to return the game to the lobby scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbySceneLoaded">
      <summary>Internal networking system message for communicating a lobby player has loaded the game scene.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalChildTransform">
      <summary>Internal networking system message for sending tranforms for client object from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalClientAuthority">
      <summary>Internal networking system message for setting authority to a client for an object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalPlayerTransform">
      <summary>Internal networking system message for sending tranforms from client to server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NetworkInfo">
      <summary>Internal networking system message for sending information about network peers to clents.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NotReady">
      <summary>
        <para>Internal networking system message for server to tell clients they are no longer ready.</para>
        <para>Can be used when switching scenes, to stop receiving network traffic during the switch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectDestroy">
      <summary>Internal networking system message for destroying objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectHide">
      <summary>Internal networking system message for hiding objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawn">
      <summary>Internal networking system message for spawning objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawnScene">
      <summary>Internal networking system message for spawning scene objects.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Owner">
      <summary>Internal networking system message for telling clients they own a player object.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Ready">
      <summary>Internal networking system message for clients to tell server they are ready.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.RemovePlayer">
      <summary>Internal networking system message for removing a player object which was spawned for a client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Rpc">
      <summary>Internal networking system message for sending a ClientRPC from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Scene">
      <summary>Internal networking system message that tells clients which scene to load when they connect to a server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SpawnFinished">
      <summary>Internal networking system messages used to tell when the initial contents of a scene is being spawned.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncEvent">
      <summary>Internal networking system message for sending a SyncEvent from server to client.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncList">
      <summary>Internal networking system message for sending a USyncList generic list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.UpdateVars">
      <summary>Internal networking system message for updating SyncVars on a client from a server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.MsgType.MsgTypeToString(System.Int16)">
      <summary>Returns the name of internal message types by their id.</summary>
      <param name="value">A internal message id value.</param>
      <returns>The name of the internal message.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkAnimator.animator">
      <summary>The animator component to synchronize.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend(System.Int32)">
      <summary>Gets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <returns>True if the parameter should be sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend(System.Int32,System.Boolean)">
      <summary>Sets whether an animation parameter should be auto sent.</summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.String)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.Int32)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
        <para>If local authority is set, and this is called from the client, then the trigger will be invoked on the server and all clients. If not, then this is called on the server, and the trigger will be called on all clients.</para>
      </summary>
      <param name="hash">Hash id of trigger (from the Animator).</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient">
      <summary>The <see cref="T:UnityEngine.Networking.NetworkConnection" /> associated with this <see cref="T:UnityEngine.Networking.NetworkIdentity" />. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToServer">
      <summary>The <see cref="T:UnityEngine.Networking.NetworkConnection" /> associated with this <see cref="T:UnityEngine.Networking.NetworkIdentity" />. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>The LocalPlayerAuthority value on the NetworkIdentity determines how authority is determined. For most objects, authority is held by the server / host. For objects with LocalPlayerAuthority set, authority is held by the client of that player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>In multiplayer games, there are multiple instances of the Player object. The client needs to know which one is for "themselves" so that only that player processes input and potentially has a camera attached. The IsLocalPlayer function will return true only for the player instance that belongs to the player on the local machine, so it can be used to filter out input for non-local players.This example shows processing input for only the local player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isServer">
      <summary>
        <para>Returns true if this object is active on an active server.</para>
        <para>This is only true if the object has been spawned. This is different from NetworkServer.active, which is true if the server itself is active rather than this object being active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority">
      <summary>This value is set on the NetworkIdentity and is accessible here for convenient access for scripts.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.netId">
      <summary>
        <para>The unique network Id of this object.</para>
        <para>This is assigned at runtime by the network server and will be unique for all objects for that network session.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.playerControllerId">
      <summary>
        <para>The id of the player associated with thei behaviour.</para>
        <para>This is only valid if the object is a local player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits">
      <summary>
        <para>This clears all the dirty bits that were set on this script by SetDirtyBits();</para>
        <para>This is automatically invoked when an update is sent for this object, but can be called manually as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The QoS channel for this script.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
        <para>Using the NetworkSettings custom attribute causes this function to be implemented for this script, but developers can also implement it themselves.</para>
      </summary>
      <returns>The time in seconds between updates.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeCommand(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a Command.</summary>
      <param name="cmdHash">Hash of the Command name.</param>
      <param name="reader">Parameters to pass to the command.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeRPC(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke an RPC function.</summary>
      <param name="cmdHash">Hash of the RPC name.</param>
      <param name="reader">Parameters to pass to the RPC function.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>Manually invoke a SyncEvent.</summary>
      <param name="cmdHash">Hash of the SyncEvent name.</param>
      <param name="reader">Parameters to pass to the SyncEvent.</param>
      <returns>Returns true if successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnCheckObserver(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Callback used by the visibility system to determine if an observer (player) can see this object.</para>
        <para>If this function returns true, the network connection will be added as an observer.</para>
      </summary>
      <param name="conn">Network connection of a player.</param>
      <returns>True if the player can see this object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>Virtual function to override to receive custom serialization data.</summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy">
      <summary>
        <para>This is invoked on clients when the server has caused this object to be destroyed.</para>
        <para>This can be used as a hook to invoke effects or do client specific cleanup.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system to (re)construct the set of observers that can see this object.</para>
        <para>Implementations of this callback should add network connections of players that can see this object to the observers set.</para>
      </summary>
      <param name="initialize">True if the set of observers is being built for the first time.</param>
      <returns>Return true if this function did work.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>Virtual function to override to send custom serialization data.</summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>True if data was written.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system for objects on a host.</para>
        <para>Objects on a host (with a local client) cannot be disabled or destroyed when they are not visibile to the local client. So this function is called to allow custom code to hide these objects. A typical implementation will disable renderer components on the object. This is only called on local clients on a host.</para>
      </summary>
      <param name="vis">New visibility state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartAuthority">
      <summary>
        <para>This is invoked on behaviours that have authority, based on context and the LocalPlayerAuthority value on the NetworkIdentity.</para>
        <para>This is called after OnStartServer and OnStartClient.When NetworkIdentity.AssignClientAuthority() is called on the server, this will be called on the client that owns the object. When an object is spawned with NetworkServer.SpawnWithClientAuthority(), this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
        <para>Objects on the host have this function called, as there is a local client on the host. The values of SyncVars on object are guaranteed to be initialized correctly with the latest state from the server when this function is called on the client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer">
      <summary>
        <para>Called when the local player object has been set up.</para>
        <para>This happens after OnStartClient(), as it is triggered by an ownership message from the server. This is an appropriate place to activate components or functionality that should only be active for the local player, such as cameras and input.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartServer">
      <summary>
        <para>Called when the server starts listening.</para>
        <para>This happens when an object is spawned, or for scene objects it happens when NetworkServer.SpawnObjects() is called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStopAuthority">
      <summary>
        <para>This is invoked on behaviours when authority is removed.</para>
        <para>When NetworkIdentity.RemoveClientAuthority() is called on the server, this will be called on the client that owns the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.PreStartClient">
      <summary>An internal method called on client objects to resolve GameObject references.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.SetDirtyBit(System.UInt32)">
      <summary>Used to set the behaviour as dirty, so that a network update will be sent for the object.</summary>
      <param name="dirtyBit">Bit mask to set.</param>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.broadcastData">
      <summary>The data broadcast by the server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.serverAddress">
      <summary>The IP address of the server that broadcasts this data.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.active">
      <summary>True if a network client is currently active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.allClients">
      <summary>
        <para>A list of all the active network clients in the current process.</para>
        <para>This is NOT a list of all clients that are connected to the remote server, it is client instances on the local game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.connection">
      <summary>The NetworkConnection object this client is using.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.handlers">
      <summary>The registered network message handlers.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.hostTopology">
      <summary>
        <para>The host topology that this client is using.</para>
        <para>This is read-only once the client is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.isConnected">
      <summary>This gives the current connection status of the client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.networkConnectionClass">
      <summary>
        <para>The class to use when creating new NetworkConnections.</para>
        <para>This can be set with SetNetworkConnectionClass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.numChannels">
      <summary>The number of QoS channels currently configured for this client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.peers">
      <summary>
        <para>The other network participants in the current game.</para>
        <para>This is only populated if the server has been configured to distribute peer information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverIp">
      <summary>
        <para>The IP address of the server that this client is connected to.</para>
        <para>This will be empty if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverPort">
      <summary>
        <para>The port of the server that this client is connected to.</para>
        <para>This will be zero if the client has not connected yet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.#ctor">
      <summary>Creates a new NetworkClient instance.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="config">Transport layer configuration object.</param>
      <param name="maxConnections">The maximum number of connections to allow.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
        <para>The settings in the ConnectionConfig or HostTopology object will be used to configure the transport layer connection used by this client. This must match the configuration of the server.</para>
      </summary>
      <param name="topology">Transport layer topology object.</param>
      <returns>True if the configuration was successful.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect client to a NetworkServer instance.</para>
        <para>Connecting to a server is asynchronous. There is connection message that is fired when the client connects. If the connection fails, a MsgType.SYSTEM_ERROR message will be generated. Once a connection is established you are able to send messages on the connection using NetworkClient.Send(). If using other features of the high level api, the client should call NetworkClient.IsReady() once it is ready to participate in the game. At that point the client will be sent spawned objects and state update messages.</para>
      </summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ConnectWithSimulator(System.String,System.Int32,System.Int32,System.Single)">
      <summary>Connect client to a NetworkServer instance with simulated latency and packet loss.</summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
      <param name="latency">Simulated latency in milliseconds.</param>
      <param name="packetLoss">Simulated packet loss percentage.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Disconnect">
      <summary>
        <para>Disconnect from server.</para>
        <para>The disconnect message will be invoked.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetConnectionStats">
      <summary>Retrieves statistics about the network packets sent on this connection.</summary>
      <returns>Dictionary of packet statistics for the client's connection.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetRTT">
      <summary>
        <para>Gets the Return Trip Time for this connection.</para>
        <para>This value is calculated by the UTransport layer.</para>
      </summary>
      <returns>Return trip time in milliseconds.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ResetConnectionStats">
      <summary>
        <para>Resets the statistics return by NetworkClient.GetConnectionStats() to zero values.</para>
        <para>Useful when building per-second network statistics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server. This message is sent on channel zero, which be default is the reliable channel.</para>
        <para>The message must be an instance of a class derived from MessageBase.</para>
        <para>The message id passed to Send() is used to identify the handler function to invoke on the server when the message is received.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">A message instance to send.</param>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>This sends a network message with a message Id to the server on a specific channel.</para>
        <para>This does the same thing as NetworkClient.Send(), but allows a transport layer QoS channel to be specified.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The channel to send the message on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends the data in an array of bytes to the server that the client is connected to.</para>
        <para>The data must be properly formatted.</para>
      </summary>
      <param name="data">Data to send.</param>
      <param name="numBytes">Number of bytes of data.</param>
      <param name="channelId">The QoS channel to send data on.</param>
      <returns>True if successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server on channel one, which be default is the un-reliable channel.</para>
        <para>This does the same thing as NetworkClient.Send(), except that it send on the unreliable channel.</para>
      </summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of the NetworkWriter's buffer to the connected server on the specified channel.</para>
        <para>The format of the data in the writer must be properly formatted for it to be processed as a message by the server. The functions StartMessage() and FinishMessage() can be used to properly format messages:</para>
      </summary>
      <param name="writer">Writer object containing data to send.</param>
      <param name="channelId">QoS channel to send data on.</param>
      <returns>True if data successfully sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetMaxDelay(System.Single)">
      <summary>Set the maximum amount of time that can pass for transmitting the send buffer.</summary>
      <param name="seconds">Delay in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Shutdown">
      <summary>
        <para>Shut down a client.</para>
        <para>This should be done when a client is no longer going to be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.UnregisterHandler(System.Int16)">
      <summary>Unregisters a network message handler.</summary>
      <param name="msgType">The message type to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetTotalConnectionStats">
      <summary>Retrieves statistics about the network packets sent on all connections.</summary>
      <returns>Dictionary of stats.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ShutdownAll">
      <summary>
        <para>Shuts down all network clients.</para>
        <para>This also shuts down the transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.address">
      <summary>The IP address associated with the connection.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.clientOwnedObjects">
      <summary>
        <para>A list of the NetworkIdentity objects owned by this connection.</para>
        <para>This includes the player object for the connection - if it has localPlayerAutority set, and any objects spawned with local authority or set with AssignLocalAuthority. This list is read only. This list can be used to validate messages from clients, to ensure that clients are only trying to control objects that they own.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.connectionId">
      <summary>
        <para>Unique identifier for this connection.</para>
        <para>Connect Ids begin at one for remote connections.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.hostId">
      <summary>Transport level host id for this connection.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.isReady">
      <summary>
        <para>Flag that tells if the connection has been marked as "ready" by a client calling ClientScene.Ready().</para>
        <para>This property is read-only. It is set by the system on the client when ClientScene.Ready() is called, and set by the system on the server when a ready message is received from a client.A client that is ready is sent spawned objects by the server and updates to the state of spawned objects. A client that is not ready is not sent spawned objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.lastMessageTime">
      <summary>
        <para>The last time that a message was received on this connection.</para>
        <para>This includes internal system messages (such as Commands and ClientRpc calls) and user messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.logNetworkMessages">
      <summary>
        <para>Setting this to true will log the contents of network message to the console.</para>
        <para>Warning: this can be a lot of data and can be very slow. Both incoming and outgoing messages are logged. The format of the logs is:ConnectionSend con:1 bytes:11 msgId:5 FB59D743FD120000000000 ConnectionRecv con:1 bytes:27 msgId:8 14F21000000000016800AC3FE090C240437846403CDDC0BD3B0000Note that these are application level network messages, not protocol level packets. There will typically be multiple network messages combined in a single protocol packet.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.playerControllers">
      <summary>
        <para>The list of players for this connection.</para>
        <para>In most cases this will be a single player. But, for "Couch Multiplayer" there could be multiple players for a single client. To see the players on your own client see <see cref="P:UnityEngine.Networking.ClientScene.localPlayers" /> list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Disconnect">
      <summary>Disconnects this connection.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Dispose">
      <summary>Disposes of this connection, releasing channel buffers that it holds.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.FlushChannels">
      <summary>
        <para>This causes the channels of the network connection to flush their data to the transport layer.</para>
        <para>This is called automatically by connections used by NetworkServer and NetworkClient, but can be called manually for connections used in other contexts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get statistics for incoming traffic.</summary>
      <param name="numMsgs">Number of messages received.</param>
      <param name="numBytes">Number of bytes received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get statistics for outgoing traffic.</summary>
      <param name="numMsgs">Number of messages sent.</param>
      <param name="numBufferedMsgs">Number of messages currently buffered for sending.</param>
      <param name="numBytes">Number of bytes sent.</param>
      <param name="lastBufferedPerSecond">How many messages were buffered in the last second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the buffer, and call handler functions.</para>
        <para>The data is assumed to have come from the network, and contains network messages.This function is used by network connections when they receive data.</para>
      </summary>
      <param name="buffer">Data to process.</param>
      <param name="receivedSize">Size of the data to process.</param>
      <param name="channelId">Channel the data was recieved on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleReader(UnityEngine.Networking.NetworkReader,System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the stream, and call handler functions.</para>
        <para>The data in the stream is assumed to have come from the network, and contains network messages.This function is used by network connections when they receive data.</para>
      </summary>
      <param name="reader">Stream that contains data.</param>
      <param name="receivedSize">Size of the data.</param>
      <param name="channelId">Channel the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Initialize(System.String,System.Int32,System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This inializes the internal data structures of a NetworkConnection object, including channel buffers.</para>
        <para>This is called by NetworkServer and NetworkClient on connection objects, but if used outside of that context, this function should be called before the connection is used.</para>
      </summary>
      <param name="hostTopology">The topology to be used.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(System.Int16,UnityEngine.Networking.NetworkReader,System.Int32)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="msgType">The message type of the handler to use.</param>
      <param name="reader">The stream to read the contents of the message from.</param>
      <param name="channelId">The channel that the message arrived on.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(UnityEngine.Networking.NetworkMessage)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
        <para>Network connections used by the NetworkClient and NetworkServer use this function for handling network messages.</para>
      </summary>
      <param name="netMsg">The message object to process.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandlerNoData(System.Int16)">
      <summary>
        <para>This function invokes the registered handler function for a message, without any message data.</para>
        <para>This is useful to invoke handlers that dont have any additional data, such as the handlers for MsgType.Connect.</para>
      </summary>
      <param name="msgType">The message id of the handler to invoke.</param>
      <returns>True if a handler function was found and invoked.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>This registers a handler function for a message Id.</summary>
      <param name="msgType">The message Id to register.</param>
      <param name="handler">The handler function to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ResetStats">
      <summary>Resets the statistics that are returned from NetworkClient.GetConnectionStats().</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message Id on the connection. This message is sent on channel zero, which be default is the reliable channel.</summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>This sends a network message on the connection using a specific transport layer channel.</summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>This sends an array of bytes on the connection.</summary>
      <param name="bytes">The array of data to be sent.</param>
      <param name="numBytes">The number of bytes in the array to be sent.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>Success if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>This sends a network message with a message Id on the connection. This message is sent on channel one, which be default is the un-reliable channel.</summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of a NetworkWriter object on the connection.</para>
        <para>The example below constructs a writer and sends it on a connection.</para>
      </summary>
      <param name="writer">A writer object containing data to send.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>True if the data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetChannelOption(System.Int32,UnityEngine.Networking.ChannelOption,System.Int32)">
      <summary>
        <para>This sets an option on the network channel.</para>
        <para>Channel options are usually advanced tuning parameters.</para>
      </summary>
      <param name="channelId">The channel the option will be set on.</param>
      <param name="option">The option to set.</param>
      <param name="value">The value for the option.</param>
      <returns>True if the option was set.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetMaxDelay(System.Single)">
      <summary>The maximum time in seconds that messages are buffered before being sent.</summary>
      <param name="seconds">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ToString">
      <summary>Returns a string representation of the NetworkConnection object state.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportRecieve(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data from the network before it is passed to the application.</para>
        <para>The default implementation of this function calls HandleBytes() on the received data. Custom implmentations can also use HandleBytes(), but can pass modified versions of the data received or other data.This example logs the data received to the console, then passes it to HandleBytes.</para>
        <para>Other uses for this function could be data compression or data encryption.Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">The data recieved.</param>
      <param name="numBytes">The size of the data recieved.</param>
      <param name="channelId">The channel that the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportSend(System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data send by the application before it goes to the network transport layer.</para>
        <para>The default implementation of this function calls NetworkTransport.Send() with the supplied data, but custom implementations can pass modified versions of the data. This example logs the sent data to the console:</para>
        <para>Other uses for this function could be data compression or data encryption.Custom network connection classes are used by setting NetworkServer.NetworkConnectionClass and NetworkClient.NetworkConnectionClass.</para>
      </summary>
      <param name="bytes">Data to send.</param>
      <param name="numBytes">Size of data to send.</param>
      <param name="channelId">Channel to send data on.</param>
      <param name="error">Error code for send.</param>
      <returns>True if data was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.UnregisterHandler(System.Int16)">
      <summary>This removes the handler registered for a message Id.</summary>
      <param name="msgType">The message id to unregister.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scriptCRCCheck">
      <summary>
        <para>Enables a CRC check between server and client that ensures the <see cref="T:UnityEngine.Networking.NetworkBehaviour" /> scripts match.</para>
        <para>This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scripts">
      <summary>
        <para>A dictionary of script QoS channels.</para>
        <para>This is used to compare script network configurations between clients and servers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.RegisterBehaviour(System.String,System.Int32)">
      <summary>This is used to setup script network settings CRC data.</summary>
      <param name="name">Script name.</param>
      <param name="channel">QoS Channel.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.ReinitializeScriptCRCs">
      <summary>
        <para>This can be used to reinitialize the set of script CRCs.</para>
        <para>This is very rarely required - only when NetworkBehaviour scripts are dynamically loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastData">
      <summary>
        <para>The data to include in the broadcast message when running as a server.</para>
        <para>If using NetworkManager integration, this will be overriden with the NetworkManager's address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastInterval">
      <summary>How often in milliseconds to broadcast when running as a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastKey">
      <summary>A key to identify this application in broadcasts.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastPort">
      <summary>The network port to broadcast on and listen to.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastsReceived">
      <summary>
        <para>A dictionary of broadcasts received from servers.</para>
        <para>The key is the server address, and the value is a NetworkBroadcastResult object that contains the data sent by the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion">
      <summary>The sub-version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastVersion">
      <summary>The version of the application to broadcast. This is used to match versions of the same application.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.hostId">
      <summary>The TransportLayer hostId being used (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isClient">
      <summary>True if running in client mode (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isServer">
      <summary>True if running in server mode (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetX">
      <summary>The horizontal offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetY">
      <summary>The vertical offset of the GUI if active.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.running">
      <summary>True is broadcasting or listening (read-only).</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.showGUI">
      <summary>True to draw the default Broacast control UI.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.useNetworkManager">
      <summary>
        <para>True to integrate with the NetworkManager.</para>
        <para>When running as a server, this will include the NetworkManager's address in broadcast messages. When running as a client, this will be able to join matching games found by using the NetworkManager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.Initialize">
      <summary>Initializes the NetworkDiscovery component.</summary>
      <returns>Return true if the network port was available.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast(System.String,System.String)">
      <summary>This is a virtual function that can be implemented to handle broadcast messages when running as a client.</summary>
      <param name="fromAddress">The IP address of the server.</param>
      <param name="data">The data broadcast by the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsClient">
      <summary>Starts listening for broadcasts messages.</summary>
      <returns>True is able to listen.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsServer">
      <summary>Starts sending broadcast messages.</summary>
      <returns>True is able to broadcast.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StopBroadcast">
      <summary>Stops listening and broadcasting.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.IsValid">
      <summary>A valid NetworkHash has a non-zero value.</summary>
      <returns>True if the value is non-zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Reset">
      <summary>Resets the value of a NetworkHash to zero (invalid).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.ToString">
      <summary>Returns a string representation of a NetworkHash object.</summary>
      <returns>A hex asset string.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Parse(System.String)">
      <summary>This parses the string representation of a NetworkHash into a binary object.</summary>
      <param name="text">A hex string to parse.</param>
      <returns>A 128 bit network hash object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.assetId">
      <summary>Unique identifier used to find the source assets when server spawns the on clients.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner">
      <summary>
        <para>The client that has authority for this object. This will be null if no client has authority.</para>
        <para>This is set for player objects his LocalPlayerAuthority, and for objects set with AssignClientAuthority, and spawned with SpawnWithClientAuthority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToClient">
      <summary>The UConnection associated with this NetworkIdentity. This is only valid for player objects on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToServer">
      <summary>The UConnection associated with this NetworkIdentity. This is only valid for player objects on a local client.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
        <para>This value is determined at runtime, as opposed to LocalPlayerAuthority which is set on the prefab. For most objects, authority is held by the server / host. For objects with LocalPlayerAuthority set, authority is held by the client of that player.For objects that had their authority set by AssignClientAuthority on the server, this will be true on the client that owns the object. NOT on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isClient">
      <summary>Returns true if running as a client and this object was spawned by a server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
        <para>This is set when the server has spawned an object for this particular client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isServer">
      <summary>Returns true if running as a server, which spawned the object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.localPlayerAuthority">
      <summary>
        <para>LocalPlayerAuthority means that the client of the "owning" player has authority over their own player object.</para>
        <para>Authority for this object will be on the player's client. So hasAuthority will be true on that client - and false on the server and on other clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.netId">
      <summary>Unique identifier for this particular object instance, used for tracking objects between networked clients and the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.observers">
      <summary>The set of network connections (players) that can see this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.playerControllerId">
      <summary>
        <para>The id of the player associated with this object.</para>
        <para>This will only be valid if this object is for a local player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.sceneId">
      <summary>
        <para>A unique identifier for NetworkIdentity objects within a scene.</para>
        <para>This is used for spawning scene objects on clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.serverOnly">
      <summary>Flag to make this object only exist when the game is running as a server (or host).</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.AssignClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This assigns control of an object to a client via the client's NetworkConnection.</para>
        <para>This causes hasAuthority to be set on the client that owns the object, and OnStartAuthority will be called on that client. This object then will be in the clientOwnedObjects list for the connection.Authority can be removed with RemoveClientAuthority. Only one client can own an object at any time. Only NetworkIdentities with LocalPlayerAuthority set can have client authority assigned. This does not need to be called for player objects, as their authority is setup automatically.</para>
      </summary>
      <param name="conn">The connection of the client to assign authority to.</param>
      <returns>True if authority was assigned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.ForceSceneId(System.Int32)">
      <summary>
        <para>Force the scene ID to a specific value.</para>
        <para>This can be used to fix an invalid scene ID. If you process all the NetworkIdentity components in a scene you can assign them new values starting from 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RebuildObservers(System.Boolean)">
      <summary>This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour.</summary>
      <param name="initialize">True if this is the first time.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Removes ownership for an object for a client by its conneciton.</para>
        <para>This applies to objects that had authority set by AssignClientAuthority, or SpawnWithClientAuthority. Authority cannot be removed for player objects.</para>
      </summary>
      <param name="conn">The connection of the client to remove authority for.</param>
      <returns>True if authority is removed.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkInstanceId.Invalid">
      <summary>
        <para>A static invalid NetworkInstanceId that can be used for comparisons.</para>
        <para>The default value of NetworkInstanceId.Value is zero, and IsEmpty() can be used to check this. But NetworkInstanceId.Invalid is available for specifically setting and checking for invalid IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkInstanceId.Value">
      <summary>The internal value of this identifier.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.IsEmpty">
      <summary>
        <para>Returns true if the value of the NetworkInstanceId is zero.</para>
        <para>Object that have not been spawned will have a value of zero.</para>
      </summary>
      <returns>True if zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.ToString">
      <summary>Returns a string of "NetID:value".</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the PlayScene.</para>
        <para>When CheckReadyToBegin starts the game from the lobby, a new player object is created from this prefab, and that object is made the active player object using [NetworkServer.ReplacePlayerForConnection].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the LobbyScene.</para>
        <para>This prefab must have a NetworkLobbyPlayer component on it.In the lobby scene, this will be the active player object, but in other scenes while the game is running, this will be replaced by a player object created from the GamePlayerPrefab. But once returned to the lobby scene this will again become the active player object.This can be used to store user data that persists for the lifetime of the session, such as color choices or weapon choices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyScene">
      <summary>The scene to use for the lobby. This is similar to the offlineScene of the NetworkManager.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyManager.lobbySlots">
      <summary>
        <para>These slots track players that enter the lobby.</para>
        <para>The slotId on players is global to the game - across all players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayers">
      <summary>
        <para>The maximum number of players allowed in the game.</para>
        <para>Note that this is the number "players" not clients or connections. There can be multiple players per client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection">
      <summary>
        <para>The maximum number of players per connection.</para>
        <para>Calling [ClientScene.AddPlayer] will fail if this limit is reached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.minPlayers">
      <summary>
        <para>The minimum number of players required to be ready for the game to start.</para>
        <para>If this is zero then the game can start with any number of players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.playScene">
      <summary>The scene to use for the playing the game from the lobby. This is similar to the onlineScene of the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.showLobbyGUI">
      <summary>
        <para>This flag enables display of the default lobby UI.</para>
        <para>This is rendered using the old GUI system, so is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin">
      <summary>
        <para>CheckReadyToBegin checks all of the players in the lobby to see if their readyToBegin flag is set.</para>
        <para>If all of the players are ready, then the server switches from the LobbyScene to the PlayScene - essentially starting the game. This is called automatically in response to NetworkLobbyPlayer.SendReadyToBeginMessage().</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed">
      <summary>
        <para>Called on the client when adding a player to the lobby fails.</para>
        <para>This could be because the lobby is full, or the connection is not allowed to have more players.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when it connects to server.</summary>
      <param name="conn">The connection that connected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when disconnected from a server.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientEnter">
      <summary>This is a hook to allow custom behaviour when the game client enters the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit">
      <summary>This is a hook to allow custom behaviour when the game client exits the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the client when the client is finished loading a new networked scene.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a new client connects to the server.</summary>
      <param name="conn">The new connection.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the GamePlayer object on the server.</para>
        <para>By default the gamePlayerPrefab is used to create the game-player, but this function allows that behaviour to be customized. The object returned from the function will be used to replace the lobby-player on the connection.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player on the connnection.</param>
      <returns>A new GamePlayer object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the lobby-player object on the server.</para>
        <para>By default the lobbyPlayerPrefab is used to create the lobby-player, but this function allows that behaviour to be customized.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player.</param>
      <returns>The new lobby-player object.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>This is called on the server when a client disconnects.</summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>This is called on the server when a player is removed.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady">
      <summary>
        <para>This is called on the server when all the players in the lobby are ready.</para>
        <para>The default implementation of this function uses ServerChangeScene() to switch to the game player scene. By implementing this callback you can customize what happens when all the players in the lobby are ready, such as adding a countdown or a confirmation for a group leader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged(System.String)">
      <summary>This is called on the server when a networked scene finishes loading.</summary>
      <param name="sceneName">Name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This is called on the server when it is told that a client has finished switching from the lobby scene to a game player scene.</para>
        <para>When switching from the lobby, the lobby-player is replaced with a game-player object. This callback function gives an opportunity to apply state from the lobby-player to the game-player object.</para>
      </summary>
      <param name="lobbyPlayer">The lobby player object.</param>
      <param name="gamePlayer">The game player object.</param>
      <returns>False to not allow this player to replace the lobby player.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>This is called on the client when a client is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartHost">
      <summary>This is called on the host when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer">
      <summary>This is called on the server when the server is started - including when a host is started.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient">
      <summary>This is called on the client when the client stops.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost">
      <summary>This is called on the host when the host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby">
      <summary>Sends a message to the server to make the game return to the lobby scene.</summary>
      <returns>True if message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby">
      <summary>Calling this causes the server to switch back to the lobby scene.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer">
      <summary>
        <para>This is used on clients to attempt to add a player to the game.</para>
        <para>This may fail if the game is full or the connection cannot have more players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin">
      <summary>
        <para>This is a flag that control whether this player is ready for the game to begin.</para>
        <para>When all players are ready to begin, the game will start. This should not be set directly, the SendReadyToBeginMessage function should be called on the client to set it on the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI">
      <summary>
        <para>This flag controls whether the default UI is shown for the lobby player.</para>
        <para>As this UI is rendered using the old GUI system, it is only recommended for testing purposes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.slot">
      <summary>
        <para>The slot within the lobby that this player inhabits.</para>
        <para>Lobby slots are global for the game - each player has a unique slotId.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientEnterLobby">
      <summary>This is a hook that is invoked on all player objects when entering the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby">
      <summary>This is a hook that is invoked on all player objects when exiting the lobby.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer">
      <summary>
        <para>This removes this player from the lobby.</para>
        <para>This player object will be destroyed - on the server and on all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is not ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage">
      <summary>This is used on clients to tell the server that this player is ready for the game to begin.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage">
      <summary>
        <para>This is used on clients to tell the server that the client has switched from the lobby to the GameScene and is ready to play.</para>
        <para>This message triggers the server to replace the lobby player with the game player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.networkSceneName">
      <summary>
        <para>The name of the current network scene.</para>
        <para>This is populated if the NetworkManager is doing scene management. This should not be changed directly. Calls to ServerChangeScene() cause this to change. New clients that connect to a server will automatically load this scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.singleton">
      <summary>The NetworkManager singleton object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.autoCreatePlayer">
      <summary>A flag to control whether or not player objects are automatically created on connect, and on scene change.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.channels">
      <summary>The Quality-of-Service channels to use for the network transport layer.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.client">
      <summary>
        <para>The current NetworkClient being used by the manager.</para>
        <para>This is populated when StartClient or StartLocalClient are called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.connectionConfig">
      <summary>
        <para>The custom network configuration to use.</para>
        <para>This will be used to configure the network transport layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.customConfig">
      <summary>Flag to enable custom network configuration.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.dontDestroyOnLoad">
      <summary>
        <para>A flag to control whether the NetworkManager object is destroyed when the scene changes.</para>
        <para>This should be set if your game has a single NetworkManager that exists for the lifetime of the process. If there is a NetworkManager in each scene, then this should not be set.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.isNetworkActive">
      <summary>
        <para>True if the NetworkServer or NetworkClient isactive.</para>
        <para>This is read-only. Calling StopServer() or StopClient() turns this off.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.logLevel">
      <summary>The log level specifically to user for network log messages.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matches">
      <summary>
        <para>The list of matches that are available to join.</para>
        <para>This will be populated if UMatch.ListMatches() has been called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchHost">
      <summary>The hostname of the matchmaking server.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchInfo">
      <summary>
        <para>A MatchInfo instance that will be used when StartServer() or StartClient() are called.</para>
        <para>Populating NetworkManager.matchInfo will make the game user the MatchMaker and RelayServer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchMaker">
      <summary>
        <para>The UMatch matchmaker object.</para>
        <para>This is populated if StartMatchMaker() has been called. It is used to communicate with the matchmaking service.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchName">
      <summary>The name of the current match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchPort">
      <summary>The port of the matchmaking service.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchSize">
      <summary>The maximum number of players in the current match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxConnections">
      <summary>
        <para>The maximum number of concurrent network connections to support.</para>
        <para>The effects the memory usage of the network layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkAddress">
      <summary>
        <para>The network address currently in use.</para>
        <para>For clients, this is the address of the server that is connected to. For servers, this is the local address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkPort">
      <summary>
        <para>The network port currently in use.</para>
        <para>For clients, this is the port of the server connected to. For servers, this is the listen port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.numPlayers">
      <summary>
        <para>NumPlayers is the number of active player objects across all connections on the server.</para>
        <para>This is only valid on the host / server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.offlineScene">
      <summary>
        <para>The scene to switch to when offline.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is completed - such as a client disconnect, or a server shutdown.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.onlineScene">
      <summary>
        <para>The scene to switch to when online.</para>
        <para>Setting this makes the NetworkManager do scene management. This scene will be switched to when a network session is started - such as a client connect, or a server listen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.packetLossPercentage">
      <summary>
        <para>The percentage of incoming and outgoing packets to be dropped for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerPrefab">
      <summary>
        <para>The default prefab to be used to create player objects on the server.</para>
        <para>Player objects are created in the default handler for AddPlayer() on the server. Implementing OnServerAddPlayer overrides this behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerSpawnMethod">
      <summary>The current method of spawning players used by the NetworkManager.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.runInBackground">
      <summary>
        <para>Controls whether the program runs when it is in the background.</para>
        <para>This is required when multiple instances of a program using networking are running on the same machine, such as when testing using localhost. But this is not recommended when deploying to mobile platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.scriptCRCCheck">
      <summary>
        <para>Flag for using the script CRC check between server and clients.</para>
        <para>Enables a CRC check between server and client that ensures the NetworkBehaviour scripts match. This may not be appropriate in some cases, such a when the client and server are different Unity projects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.secureTunnelEndpoint">
      <summary>
        <para>Allows you to specify an EndPoint object instead of setting networkAddress and networkPort (required for some platforms such as Xbox One).</para>
        <para>Setting this object overrides the networkAddress and networkPort fields, and will be used instead of making connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.sendPeerInfo">
      <summary>A flag to control sending the network information about every peer to all members of a match.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindAddress">
      <summary>
        <para>The IP address to bind the server to.</para>
        <para>This is only used if serverBindToIP is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindToIP">
      <summary>
        <para>Flag to tell the server whether to bind to a specific IP address.</para>
        <para>If this is false, then no specific IP address is bound to (IP_ANY).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.simulatedLatency">
      <summary>
        <para>The delay in milliseconds to be added to incoming and outgoing packets for clients.</para>
        <para>This is only used when useSimulator is set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.spawnPrefabs">
      <summary>
        <para>List of prefabs that will be registered with the spawning system.</para>
        <para>For each of these prefabs, ClientManager.RegisterPrefab() will be automatically invoke.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.startPositions">
      <summary>The list of currently registered player start positions for the current scene.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useSimulator">
      <summary>Flag that control whether clients started by this NetworkManager will use simulated latency and packet loss.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.GetStartPosition">
      <summary>
        <para>This finds a spawn position based on NetworkStartPosition objects in the scene.</para>
        <para>This is used by the default implementation of OnServerAddPlayer.</para>
      </summary>
      <returns>Returns the transform to spawn a player at, or null.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.IsClientConnected">
      <summary>
        <para>This checks if the NetworkManager has a client and that it is connected to a server.</para>
        <para>This is more specific than NetworkClient.isActive, which will be true if there are any clients active, rather than just the NetworkManager's client.</para>
      </summary>
      <returns>True if the NetworkManagers client is connected to a server.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the client when connected to a server.</para>
        <para>The default implementation of this function sets the client as ready and adds a player.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on clients when disconnected from a server.</summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on clients when a network error occurs.</summary>
      <param name="conn">Connection to a server.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a servers tells the client it is no longer ready.</para>
        <para>This is commonly used when switching scenes.</para>
      </summary>
      <param name="conn">Connection to a server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.</para>
        <para>Scene changes can cause player objects to be destroyed. The default implementation of OnClientSceneChanged in the NetworkManager is to add a player object for the connection if no player object exists.</para>
      </summary>
      <param name="conn">The network connection that the scene change message arrived on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchCreate(UnityEngine.Networking.Match.CreateMatchResponse)">
      <summary>
        <para>This is invoked when a match has been created.</para>
        <para>The default implementation of this starts a host for the match.</para>
      </summary>
      <param name="matchInfo">Info about the match that has been created.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchJoined(UnityEngine.Networking.Match.JoinMatchResponse)">
      <summary>
        <para>This is invoked when a match is joined.</para>
        <para>The default implementation of this starts a client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchList(UnityEngine.Networking.Match.ListMatchResponse)">
      <summary>
        <para>This is invoked when a list of matches is returned from ListMatches().</para>
        <para>The default implementation of this just stores the list of matches.</para>
      </summary>
      <param name="matchList">A list of available matches.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerAddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>Called on the server when a client adds a new player with ClientScene.AddPlayer.</para>
        <para>The default implementation for this function creates a new player object from the playerPrefab.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="playerControllerId">Id of the new player.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a new client connects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>Called on the server when a client disconnects.</summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>Called on the server when a network error occurs for a client connection.</summary>
      <param name="conn">Connection from client.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a client is ready.</para>
        <para>The default implementation of this function calls NetworkServer.SetClientReady() to continue the network setup process.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerRemovePlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.PlayerController)">
      <summary>
        <para>Called on the server when a client removes a player.</para>
        <para>The default implementation of this function destroys the corresponding player object.</para>
      </summary>
      <param name="conn">The connection to remove the player from.</param>
      <param name="player">The controller id of the player to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerSceneChanged(System.String)">
      <summary>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</summary>
      <param name="sceneName">The name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is a hook that is invoked when the client is started.</para>
        <para>StartClient has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
      <param name="client">The NetworkClient object that was started.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartHost">
      <summary>
        <para>This hook is invoked when a host is started.</para>
        <para>StartHost has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartServer">
      <summary>
        <para>This hook is invoked when a server is started - including when a host is started.</para>
        <para>StartServer has multiple signatures, but they all cause this hook to be called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopClient">
      <summary>This hook is called when a client is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopHost">
      <summary>This hook is called when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopServer">
      <summary>This hook is called when a server is stopped - including when a host is stopped.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.ServerChangeScene(System.String)">
      <summary>
        <para>This causes the server to switch scenes and sets the networkSceneName.</para>
        <para>Clients that connect to this server will automatically switch to this scene. This is called autmatically if onlineScene or offlineScene are set, but it can be called from user code to switch scenes again while the game is in progress. This automatically sets clients to be not-ready. The clients must call NetworkClient.Ready() again to participate in the new scene.</para>
      </summary>
      <param name="newSceneName">The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetMatchHost(System.String,System.Int32,System.Boolean)">
      <summary>This set the address of the matchmaker service.</summary>
      <param name="newHost">Hostname of matchmaker service.</param>
      <param name="port">Port of matchmaker service.</param>
      <param name="https">Protocol used by matchmaker service.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartClient">
      <summary>This starts a network client. It uses the networkAddress and networkPort properties as the address to connect to.</summary>
      <returns>The client object created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartHost">
      <summary>
        <para>This starts a network "host" - a server and client in the same application.</para>
        <para>The client returned from StartHost() is a special "local" client that communicates to the in-process server using a message queue instead of the real network. But in almost all other cases, it can be treated as a normal client.</para>
      </summary>
      <returns>The client object created - this is a "local client".</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartMatchMaker">
      <summary>
        <para>This starts matchmaker for the NetworkManager.</para>
        <para>This uses the matchHost and matchPort properties as the address of the matchmaker service to connect to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartServer">
      <summary>
        <para>This starts a new server.</para>
        <para>This uses the networkPort property as the listen port.</para>
      </summary>
      <returns>True is the server was started.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopClient">
      <summary>Stops the client that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopHost">
      <summary>This stops both the client and the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopMatchMaker">
      <summary>Stops the matchmaker that the NetworkManager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopServer">
      <summary>Stops the server that the manager is using.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UseExternalClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This allows the NetworkManager to use a client object created externally to the NetworkManager instead of using StartClient().</para>
        <para>The StartClient() function creates a client object, but this is not always what is desired. UseExternalClient allows a NetworkClient object to be created by other code and used with the NetworkManager.The client object will have the standard NetworkManager message handlers registered on it.</para>
      </summary>
      <param name="externalClient">The NetworkClient object to use.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.RegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Registers the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by NetworkStartPosition components, but can be done manually from user script code.</para>
      </summary>
      <param name="start">Transform to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.Shutdown">
      <summary>
        <para>Shuts down the NetworkManager completely and destroy the singleton.</para>
        <para>This is required if a new NetworkManager instance needs to be created after the original one was destroyed. The example below has a reference to the GameObject with the NetworkManager on it and destroys the instance before calling Shutdown() and switching scenes.</para>
        <para>This cleanup allows a new scene with a new NetworkManager to be loaded.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UnRegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Unregisters the transform of a game object as a player spawn location.</para>
        <para>This is done automatically by the <see cref="T:UnityEngine.Networking.NetworkStartPosition" /> component, but can be done manually from user code.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.manager">
      <summary>The NetworkManager associated with this HUD.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetX">
      <summary>The horizontal offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetY">
      <summary>The vertical offset in pixels to draw the HUD runtime GUI at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.showGUI">
      <summary>Whether to show the default control HUD at runtime.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.channelId">
      <summary>The transport layer channel the message was sent on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.conn">
      <summary>The connection the message was recieved on.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.msgType">
      <summary>The id of the message type of the message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.reader">
      <summary>
        <para>A NetworkReader object that contains the contents of the message.</para>
        <para>For some built-in message types with no body, this can be null.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.ReadMessage">
      <summary>
        <para>ReadMessage is used to extract a typed network message from the NetworkReader of a NetworkMessage object.</para>
        <para>For example in a handler for the AddPlayer message:</para>
        <para>The AddPlayerMessage that is created will be populated by calling DeSerialize(). So when it is returned form ReadMessage it is ready to use.</para>
      </summary>
      <returns>The type of the Network Message, must be derived from MessageBase.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.Dump(System.Byte[],System.Int32)">
      <summary>Returns a string with the numeric representation of each byte in the payload.</summary>
      <param name="payload">Network message payload to dump.</param>
      <param name="sz">Length of payload in bytes.</param>
      <returns>Dumped info from payload.</returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.checkMethod">
      <summary>Which method to use for checking proximity of players.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.forceHidden">
      <summary>
        <para>Flag to force this object to be hidden for players.</para>
        <para>If this object is a player object, it will not be hidden for that player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visRange">
      <summary>The maximim range that objects will be visible at.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval">
      <summary>How often (in seconds) that this object should update the set of players that can see it.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Position">
      <summary>The current position within the buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor">
      <summary>Creates a new NetworkReader object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor(System.Byte[])">
      <summary>Creates a new NetworkReader object.</summary>
      <param name="buffer">A buffer to construct the reader with, this buffer is NOT copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBoolean">
      <summary>Reads a boolean from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadByte">
      <summary>Reads a byte from the stream.</summary>
      <returns>The value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytes(System.Int32)">
      <summary>Reads a number of bytes from the stream.</summary>
      <param name="count">Number of bytes to read.</param>
      <returns>Bytes read. (this is a copy).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytesAndSize">
      <summary>
        <para>This read a 16-bit byte count and a array of bytes of that size from the stream.</para>
        <para>The format used by this function is the same as NetworkWriter.WriteBytesAndSize().</para>
      </summary>
      <returns>The bytes read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadChar">
      <summary>Reads a char from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor">
      <summary>Reads a unity Color objects.</summary>
      <returns>The color read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor32">
      <summary>Reads a unity color32 objects.</summary>
      <returns>The colo read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDouble">
      <summary>Reads a double from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadGameObject">
      <summary>Reads a reference to a GameObject from the stream.</summary>
      <returns>The GameObject referenced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt16">
      <summary>Reads a signed 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt32">
      <summary>Reads a signed 32bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt64">
      <summary>Reads a signed 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMatrix4x4">
      <summary>Reads a unity Matrix4x4 object.</summary>
      <returns>The matrix read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMessage">
      <summary>This is a utility function to read a typed network message from the stream.</summary>
      <returns>The type of the Network Message, must be derived from MessageBase.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkHash128">
      <summary>Reads a NetworkHash128 assetId.</summary>
      <returns>The assetId object read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkId">
      <summary>Reads a NetworkInstanceId from the stream.</summary>
      <returns>The NetworkInstanceId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkIdentity">
      <summary>Reads a reference to a NetworkIdentity from the stream.</summary>
      <returns>The NetworkIdentity object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt32">
      <summary>Reads a 32-bit variable-length-encoded value.</summary>
      <returns>The 32 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt64">
      <summary>Reads a 64-bit variable-length-encoded value.</summary>
      <returns>The 64 bit value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPlane">
      <summary>Reads a unity Plane object.</summary>
      <returns>The plane read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadQuaternion">
      <summary>Reads a Unity Quaternion object.</summary>
      <returns>The quaternion read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRay">
      <summary>Reads a Unity Ray object.</summary>
      <returns>The ray read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRect">
      <summary>Reads a Unity Rect object.</summary>
      <returns>The rect read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSByte">
      <summary>Reads a signed byte from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSceneId">
      <summary>Reads a NetworkSceneId from the stream.</summary>
      <returns>The NetworkSceneId read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSingle">
      <summary>Reads a float from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadString">
      <summary>Reads a string from the stream. (max of 32k bytes).</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadTransform">
      <summary>
        <para>Reads a reference to a Transform from the stream.</para>
        <para>The game object of this Transform must have a NetworkIdentity.</para>
      </summary>
      <returns>The transform object read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt16">
      <summary>Reads an unsigned 16 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt32">
      <summary>Reads an unsigned 32 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt64">
      <summary>Reads an unsigned 64 bit integer from the stream.</summary>
      <returns>Value read.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector2">
      <summary>Reads a Unity Vector2 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector3">
      <summary>Reads a Unity Vector3 objects.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector4">
      <summary>Reads a Unity Vector4 object.</summary>
      <returns>The vector read from the stream.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.SeekZero">
      <summary>Sets the current position of the reader's stream to the start of the stream.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ToString">
      <summary>Returns a string representation of the reader's buffer.</summary>
      <returns>Buffer contents.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkSceneId.Value">
      <summary>The internal value for this object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.IsEmpty">
      <summary>Returns true if the value is zero. Non-scene objects - ones which are spawned at runtime will have a sceneId of zero.</summary>
      <returns>True if zero.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.ToString">
      <summary>Returns a string like SceneId:value.</summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.active">
      <summary>
        <para>Checks if the server has been started.</para>
        <para>This will be true after NetworkServer.Listen() has been called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.connections">
      <summary>
        <para>A list of all the current connections from clients.</para>
        <para>The connections in the list are at the index of their connectionId. There may be nulls in this list for disconnceted clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.handlers">
      <summary>
        <para>Dictionary of the message handlers registered with the server.</para>
        <para>The key to the dictionary is the message Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.hostTopology">
      <summary>
        <para>The host topology that the server is using.</para>
        <para>This is read-only once the server is started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localClientActive">
      <summary>
        <para>True is a local client is currently active on the server.</para>
        <para>This will be true for "Hosts" on hosted server games.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localConnections">
      <summary>A list of local connections on the server.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
        <para>In seconds. The default of 0.01 seconds means packets will be delayed at most by 10 milliseconds. Setting this to zero will disable HLAPI connection buffering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.networkConnectionClass">
      <summary>
        <para>The class to be used when creating new network connections.</para>
        <para>This can be set with SetNetworkConnectionClass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.numChannels">
      <summary>The number of channels the network is configure with.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the server.</para>
        <para>The key to the dictionary is NetworkIdentity netId.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.sendPeerInfo">
      <summary>Setting this true will make the server send peer info to all participants of the network.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendNetworkInfo(UnityEngine.Networking.NetworkConnection)">
      <summary>This sends information about all participants in the current network game to the connection.</summary>
      <param name="targetConnection">Connection to send peer info to.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddExternalConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This accepts a network connection from another external source and adds it to the server.</para>
        <para>This connection will use the callbacks registered with the server, and can have players added to it like any other connection.</para>
      </summary>
      <param name="conn">Network connection to add.</param>
      <returns>True if added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>When an AddPlayer message handler has received a request from a player, the server calls this to assoicate the player object with the connection.</para>
        <para>When a player is added for a connection, the client for that connection is made ready automatically. The player object is automatically spawned, so you do not need to call NetworkServer.Spawn for that object. This function is used for "adding" a player, not for "replacing" the player on a connection. If there is already a player on this playerControllerId for this connection, this will fail.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was added.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearHandlers">
      <summary>Clear all registered callback handlers.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearLocalObjects">
      <summary>This clears all of the networked objects that the server is aware of. This can be required if a scene change deleted all of the objects without destroying them in the normal manner.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearSpawners">
      <summary>Clears all registered spawn prefab and spawn handler functions for this server.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>This configures the tranport layer settings for the server.</summary>
      <param name="config">Transport layer confuration object.</param>
      <param name="maxConnections">The maximum number of client connections to allow.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.HostTopology)">
      <summary>This configures the tranport layer settings for the server.</summary>
      <param name="topology">Transport layer topology object to use.</param>
      <returns>True if successfully configured.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Destroy(UnityEngine.GameObject)">
      <summary>Destroys this object and corresponding objects on all clients.</summary>
      <param name="obj">Game object to destroy.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DestroyPlayersForConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This destroys all the player objects associated with a NetworkConnections on a server.</para>
        <para>This is used when a client disconnects, to remove the players for that client.</para>
      </summary>
      <param name="conn">The connections object to clean up for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DisconnectAll">
      <summary>
        <para>Disconnect all currently connected clients.</para>
        <para>This can only be called on the server. Clients will receive the SYSTEM_DISCONNECT message.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.FindLocalObject(System.UInt32)">
      <summary>
        <para>This finds the NetworkIdentity game object that matches a netId.</para>
        <para>Since netIds are the same on the server and all clients for a game, this allows clients to send a netId of a local game objects, and have the server find the corresponding server object.</para>
      </summary>
      <returns>The game object that matches the netId.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetConnectionStats">
      <summary>Gets aggregate packet stats for all connections.</summary>
      <returns>Dictionary of msg types and packet statistics.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsIn(System.Int32@,System.Int32@)">
      <summary>Get inbound network statistics for the server.</summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsOut(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Get outbound network statistics for the client.</summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.String,System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the relay server instead of a local socket.</summary>
      <param name="ipAddress">The IP address to bind to (optional).</param>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.Int32)">
      <summary>Start the server on the given port number. Note that if a match has been created, this will listen using the relay server instead of a local socket.</summary>
      <param name="serverPort">Listen port number.</param>
      <returns>True if listen succeeded.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>Starts a server using a relay server. This is the manual way of using the relay server, as the regular NetworkServer.Connect() will automatically use the relay server if a match exists.</summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
        <para>There are several system message types which you can add handlers for. You can also add your own message types.</para>
        <para>The system message types are listed below:</para>
        <para>Most of these messages are for internal use only. Users should not define message ids in this range.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RemoveExternalConnection(System.Int32)">
      <summary>This removes an external connection added with AddExternalConnection().</summary>
      <param name="connectionId">The id of the connection to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ReplacePlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>This replaces the player object for a connection with a different player object. The old player object is not destroyed.</para>
        <para>If a connection already has a player object, this can be used to replace that object with a different player object. This does NOT change the ready state of the connection, so it can safely be used while changin scenes.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>True if player was replaced.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Reset">
      <summary>Reset the NetworkServer singleton.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ResetConnectionStats">
      <summary>Resets the packet stats on all connections.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToAll(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients on a specified transport layer QoS channel.</summary>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to use.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToReady(UnityEngine.GameObject,System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>Sends a network message to all connected clients that are "ready" on a specified transport layer QoS channel.</summary>
      <param name="contextObj">An object to use for context when calculating object visibility. If null, then the message is sent to all ready clients.</param>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>True if the message was sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToPlayer(UnityEngine.GameObject,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to a specific player.</para>
        <para>This bypasses the usual serialization and message structures, allowing raw bytes to be send to a player. The contents will be processed as a message on the client of the player, so it must be structured properly.</para>
      </summary>
      <param name="player">The player to send he bytes to.</param>
      <param name="buffer">Array of bytes to send.</param>
      <param name="numBytes">Size of array.</param>
      <param name="channelId">Transport layer channel id to send bytes on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToReady(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to all ready players.</para>
        <para>This bypasses the usual serialization and message structures, allowing raw bytes to be send to all ready players. The contents will be processed as a message on the client of the player, so it must be structured properly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToAll``1(System.Int16,``0)">
      <summary>Send a message structure with the given type number to all connected clients.</summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClient``1(System.Int32,System.Int16,``0)">
      <summary>Send a message to the client which owns the given connection ID.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClientOfPlayer``1(UnityEngine.GameObject,System.Int16,``0)">
      <summary>Send a message to the client which owns the given player object instance.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToReady``1(System.Int16,``0)">
      <summary>
        <para>Send a message structure with the given type number to only clients which are ready.</para>
        <para>See Networking.NetworkClient.Ready.</para>
      </summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToAll``1(System.Int16,``0)">
      <summary>Send given message structure as an unreliable message to all connected clients.</summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToReady``1(System.Int16,``0)">
      <summary>
        <para>Send given message structure as an unreliable message only to ready clients.</para>
        <para>See Networking.NetworkClient.Ready.</para>
      </summary>
      <returns>Success if message is sent.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendWriterToReady(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>Sends the contents of a NetworkWriter object to the ready players.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetAllClientsNotReady">
      <summary>
        <para>Marks all connected clients as no longer ready.</para>
        <para>All clients will no longer be sent state synchronization updates. The player's clients can call ClientManager.Ready() again to re-enter the ready state. This is useful when switching scenes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client of the connection to be not-ready.</para>
        <para>Clients that are not ready do not receive spawned objects or state synchronization updates. They client can be made ready again by calling SetClientReady().</para>
      </summary>
      <param name="conn">The connection of the client to make not ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client to be ready.</para>
        <para>When a client has signaled that it is ready, this method tells the server that the client is ready to receive spawned objects and state synchronization updates. This is usually called in a handler for the SYSTEM_READY message. If there is not specific action a game needs to take for this message, relying on the default ready handler function is probably fine, so this call wont be needed.</para>
      </summary>
      <param name="conn">The connection of the client to make ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class used when creating new network connections.</para>
        <para>The class must be derived from NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Shutdown">
      <summary>This shuts down the server and disconnects all clients.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Spawn(UnityEngine.GameObject)">
      <summary>
        <para>Spawn the given game object on all clients which are ready.</para>
        <para>This will cause a new object to be instantiated from the registered prefab, or from a custom spawn function.</para>
      </summary>
      <param name="obj">Game object with NetworkIdentity to spawn.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnObjects">
      <summary>
        <para>This causes NetworkIdentity objects in a scene to be spawned on a server.</para>
        <para>NetworkIdentity objects in a scene are disabled by default. Calling SpawnObjects() causes these scene objects to be enabled and spawned. It is like calling NetworkServer.Spawn() for each of them.</para>
      </summary>
      <returns>Success if objects where spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling AssignClientAuthority on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling AssignClientAuthority on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
        <para>This is the same as calling AssignClientAuthority on the spawned object.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>True if the object was spawned.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnregisterHandler(System.Int16)">
      <summary>Unregisters a handler for a particular message type.</summary>
      <param name="msgType">The message type to remove the handler for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnSpawn(UnityEngine.GameObject)">
      <summary>
        <para>This takes an object that has been spawned and un-spawns it.</para>
        <para>The object will be removed from clients that it was spawned on, or the custom spawn handler function on the client will be called for the object.Unlike when calling NetworkServer.Destroy(), on the server the object will NOT be destroyed. This allows the server to re-use the object, even spawn it again later.</para>
      </summary>
      <param name="obj">The spawned object to be unspawned.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.characterContoller">
      <summary>Cached CharacterController.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback2D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 2D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference.The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback3D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
        <para>This version of the callback works with objects that use 3D physics. The callback function may return false to reject the movement request completely. It may also modify the movement parameters - which are passed by reference.The example below set the callback in OnStartServer, and will disconnect a client that moves an object into an invalid position after a number of failures.</para>
        <para>This kind of server-side movement validation should be used in conjunction with client side movement validation. The callback should only detect a failure if a client is by-passing client side movement checks - by cheating.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.grounded">
      <summary>
        <para>Tells the NetworkTransform that it is on a surface (this is the default).</para>
        <para>Object that are NOT grounded will not interpolate their vertical velocity. This avoid the problem of interpolation fighting with gravity on non-authoritative objects. This only works for RigidBody2D physics objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateMovement">
      <summary>
        <para>Enables interpolation of the synchronized movement.</para>
        <para>The larger this number is, the faster the object will interpolate to the target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateRotation">
      <summary>
        <para>Enables interpolation of the synchronized rotation.</para>
        <para>If this is not set, object will snap to the new rotation. The larger this number is, the faster the object will interpolate to the target facing direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.movementTheshold">
      <summary>The distance that an object can move without sending a movement synchronization update.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody2D">
      <summary>Cached Rigidbody2D.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody3D">
      <summary>Cached Rigidbody.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.sendInterval">
      <summary>
        <para>The sendInterval controls how often state updates are sent for this object.</para>
        <para>Unlike most NetworkBehaviour scripts, for NetworkTransform this is implemented at a per-object level rather than at the per-script level. This allows more flexibility as this component is used in various situation.If sendInterval is non-zero, then transform state updates are send at most once every sendInterval seconds. However, if an object is stationary, no updates are sent.If sendInterval is zero, then no automatic updates are sent. In this case, calling SetDirtyBits() on the NetworkTransform will cause an updates to be sent. This could be used for objects like bullets that have a predictable trajectory.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.snapThreshold">
      <summary>If a movement update puts an object further from its current position that this value, it will snap to the position instead of moving smoothly.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation2D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation3D">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncVelocity">
      <summary>The velocity send for synchronization.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.transformSyncMode">
      <summary>What method to use to sync the object's position.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.childIndex">
      <summary>A unique Identifier for this NetworkTransformChild component on this root object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D">
      <summary>A callback function to allow server side validation of the movement of the child object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateMovement">
      <summary>
        <para>The rate to interpolate towards the target position.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateRotation">
      <summary>
        <para>The rate to interpolate to the target rotation.</para>
        <para>A value of 1 will snap to the position, and lower positive values will interpolate more slowly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.lastSyncTime">
      <summary>The most recent time when a movement synchronization packet arrived for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression">
      <summary>How much to compress rotation sync updates.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.sendInterval">
      <summary>The sendInterval controls how often state updates are sent for this object.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.syncRotationAxis">
      <summary>Which axis should rotation by synchronized for.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.target">
      <summary>The child transform to be synchronized.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncPosition">
      <summary>The target position interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D">
      <summary>The target rotation interpolating towards.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab">
      <summary>The prefab to use for the visualization object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32,System.String)">
      <summary>
        <para>Will create a host (open socket) with given topology and optionally port and IP.</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <param name="port">Bind to specific port, if 0 is selected the port will chosen by OS.</param>
      <param name="ip">Bind to specific IP address.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>
        <para>Will create a host (open socket) with given topology and optionally port and IP.</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <param name="port">Bind to specific port, if 0 is selected the port will chosen by OS.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHost(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>Will create a host (open socket) with given topology and optionally port and IP.</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Create a host (open socket) and configure them to simulate internet latency (works on editor and development build only).</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <param name="minTimeout">Minimum simulated delay.</param>
      <param name="maxTimeout">Maximum simulated delay.</param>
      <param name="port">Bind to specific port, if 0 is selected the port will chosen by OS.</param>
      <param name="ip">Bind to specific IP address.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Create a host (open socket) and configure them to simulate internet latency (works on editor and development build only).</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <param name="minTimeout">Minimum simulated delay.</param>
      <param name="maxTimeout">Maximum simulated delay.</param>
      <param name="port">Bind to specific port, if 0 is selected the port will chosen by OS.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(UnityEngine.Networking.HostTopology,System.Int32,System.Int32)">
      <summary>
        <para>Create a host (open socket) and configure them to simulate internet latency (works on editor and development build only).</para>
        <para>An optional specific host IP address can be provided. This is usually only useful on servers where multiple internet accessible IP addresses might be available. The simulated latency will vary according to exponential distribution.</para>
      </summary>
      <param name="topology">The host topology for this host.</param>
      <param name="minTimeout">Minimum simulated delay.</param>
      <param name="maxTimeout">Maximum simulated delay.</param>
      <returns>Returns host ID just created.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.AddWebsocketHost(UnityEngine.Networking.HostTopology,System.Int32)">
      <summary>Created web socket host. This function is supported only for Editor (Win, Linux, Mac) and StandalonePlayers (Win, Linux, Mac) Topology is used to define how many client can connect, and how many messages should be preallocated in send and receive pool, all other parameters are ignored.</summary>
      <param name="topology">Topology.</param>
      <param name="port">Listening tcp port.</param>
      <returns>Web socket host id.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)">
      <summary>
        <para>Try to establish connection to other peer.</para>
        <para>Receive() with event type kConnectEvent(kDisconnectEvent) will be signal that this connection established(cannot be established). Error parameter will return possible error. Function itself will return unique identifier (for the host) of connection.</para>
      </summary>
      <param name="hostId">Host (actually socket) id for this connection.</param>
      <param name="address">Ip4 address.</param>
      <param name="port">Port.</param>
      <param name="exeptionConnectionId">0 in the case of a default connection.</param>
      <param name="error">Possible error, kOK if it is good.</param>
      <returns>ConnectionId on success (otherwise zero).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectAsNetworkHost(System.Int32,System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create dedicated connection to relay server.</para>
        <para>Client calls this function to set itself as an owner of the network group on the relay server. This client should call <see cref="M:UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost(System.Int32,System.Byte@)" /> periodically to be notified about connection/disconnection events to/from Relay server.</para>
      </summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="address">Ip4.</param>
      <param name="port">Port.</param>
      <param name="network">Guid of relay network.</param>
      <param name="source">Guid of user.</param>
      <param name="node">Slot id for this user.</param>
      <param name="error">Possible error (<see cref="T:UnityEngine.Networking.NetworkError" />.Ok if success).</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectEndPoint(System.Int32,System.Net.EndPoint,System.Int32,System.Byte@)">
      <summary>
        <para>Try to establish connection to other peer, where the peer is specified using a C# System.EndPoint.</para>
        <para>This is primarily useful on platforms (such as Xbox One) that require passing in special structures representing the remote host (as compared to the usual IP/port combination).This is also useful for libraries relying on using an IPEndPoint object.</para>
      </summary>
      <param name="hostId">Host (actually socket) id for this connection.</param>
      <param name="xboxOneEndPoint">A valid System.EndPoint.</param>
      <param name="exceptionConnectionId">0 in the case of a default connection.</param>
      <param name="error">Return kOk on success, otherwise a one-byte error code.</param>
      <returns>ConnectionId on success (otherwise zero).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Int32,System.Single,System.Byte@)">
      <summary>
        <para>Create connection to other peer in the relay group.</para>
        <para>Similar to <see cref="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)" /> but via relay server.</para>
      </summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="address">IP.</param>
      <param name="port">Port.</param>
      <param name="exceptionConnectionId">Id of exception, default in case 0.</param>
      <param name="relaySlotId">Id of remote peer in relay.</param>
      <param name="network">Guid of relay network.</param>
      <param name="source">Guid of user who want to establish connect (serve as tmp password).</param>
      <param name="node">Slot id reserved for user.</param>
      <param name="bytesPerSec">Average bandwidth (bandwidth will be throttled on this level).</param>
      <param name="bucketSizeFactor">Allowed peak bandwidth (peak bandwidth = factor*bytesPerSec, recommended value is 2.0) If data has not been sent for a long time, it is allowed to send more data, with factor 2 it is allowed send 2*bytesPerSec bytes per sec.</param>
      <param name="error">Possible error.</param>
      <returns>ConnectionId on success (otherwise zero).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(System.Int32,System.String,System.Int32,System.Int32,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID,System.Byte@)">
      <summary>
        <para>Create connection to other peer in the relay group.</para>
        <para>Similar to <see cref="M:UnityEngine.Networking.NetworkTransport.Connect(System.Int32,System.String,System.Int32,System.Int32,System.Byte@)" /> but via relay server.</para>
      </summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="address">IP.</param>
      <param name="port">Port.</param>
      <param name="exceptionConnectionId">Id of exception, default in case 0.</param>
      <param name="relaySlotId">Id of remote peer in relay.</param>
      <param name="network">Guid of relay network.</param>
      <param name="source">Guid of user who want to establish connect (serve as tmp password).</param>
      <param name="node">Slot id reserved for user.</param>
      <param name="error">Possible error.</param>
      <returns>ConnectionId on success (otherwise zero).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ConnectWithSimulator(System.Int32,System.String,System.Int32,System.Int32,System.Byte@,UnityEngine.Networking.ConnectionSimulatorConfig)">
      <summary>
        <para>Connect with simulated latency.</para>
        <para>Will establish connection between peers and configure it to simulate internet latency (works on editor and development build only).</para>
      </summary>
      <param name="hostId">Host id.</param>
      <param name="address">Peer ip.</param>
      <param name="port">Peer port.</param>
      <param name="exeptionConnectionId">Special connection id or 0 for default.</param>
      <param name="error">Returned error.</param>
      <param name="conf">Simulation configuration definec latency for this connection.</param>
      <returns>ConnectionId on success (otherwise zero).</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Disconnect(System.Int32,System.Int32,System.Byte@)">
      <summary>Send disconnect signal to peer and close connection. user should call Receive() to be notified that connection is closed. This signal will send only once (best effort delivery) iif this packet will dropped by some reason, peer will close connection by timeout.</summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="connectionId">Id of closing connection.</param>
      <param name="error">kOK if it was successful.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.DisconnectNetworkHost(System.Int32,System.Byte@)">
      <summary>Aplyed only for client which has been already owner of the same group of relay server. it will disconnect this owner from the group, group will be distracted or (if it supported) one of the member of this group should became new owner (owner migration).</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="error">kOk in case success.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.FinishSendMulticast(System.Int32,System.Byte@)">
      <summary>Function will finalize sending message to group of connection. (only one multicast message per time is allowed for host).</summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="error">Possible error (kOK in case success).</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetAssetId(UnityEngine.GameObject)">
      <summary>The UNet spawning system uses assetIds to identify how spawn remote objects. This function allows you to get the assetId for the prefab associated with an object.</summary>
      <param name="go">Target game object to get asset Id for.</param>
      <returns>The assetId of the game object's prefab.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo(System.Int32,System.String@,System.Int32@,System.Byte@)">
      <summary>If Receive() function returns BroadcastEvent, immedeately this function will return connection info of broadcast sender. This info can be used for connection to broadcast sender.</summary>
      <param name="hostId">Id of broadcast receiver (returns with Receve() function).</param>
      <param name="address">Ip address of broadcast sender.</param>
      <param name="port">Port of broadcast sender.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage(System.Int32,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>If Receive() function returns BroadcastEvent, immedeately this function will return complimentary message of broadcast sender.</summary>
      <param name="hostId">Id of broadcast receiver (returns with Receve() function).</param>
      <param name="buffer">Message buffer provided by caller.</param>
      <param name="bufferSize">Buffer size.</param>
      <param name="receivedSize">Received size (if received size &gt; bufferSize, corresponding error will be set).</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetConnectionInfo(System.Int32,System.Int32,System.String@,System.Int32@,UnityEngine.Networking.Types.NetworkID@,UnityEngine.Networking.Types.NodeID@,System.Byte@)">
      <summary>Return connection parameters of connected connection, this parameters can be sent to other user which can establish direct connection to this peer. If peer connected via relay, relay related parameters will be not invalid.</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="address">Ip4.</param>
      <param name="port">Port.</param>
      <param name="network">Relay network guid.</param>
      <param name="dstNode">Destination slot id.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentIncomingMessageAmount">
      <summary>Return value of messages waiting for reading.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentOutgoingMessageAmount">
      <summary>Return total message amount waiting for sending.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetCurrentRtt(System.Int32,System.Int32,System.Byte@)">
      <summary>Return round trip time for connection.</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetIOTimeuS">
      <summary>Function returns time spent on network io operations in micro seconds.</summary>
      <returns>Time in micro seconds.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetworkLostPacketNum(System.Int32,System.Int32,System.Byte@)">
      <summary>Return total number of packets has been lost from start.</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetNetworkTimestamp">
      <summary>Get UNET timestamp which can be added to message for further definitions of packet delaying.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetPacketReceivedRate(System.Int32,System.Int32,System.Byte@)">
      <summary>Return current receive rate in bytes per sec.</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetPacketSentRate(System.Int32,System.Int32,System.Byte@)">
      <summary>Reurn outgoing rate in bytes per second.</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Connection id.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.GetRemoteDelayTimeMS(System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Return time delay for timestamp received from message (previously created by GetNetworkTimestamp()).</summary>
      <param name="hostId">Id of udp socket used to.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="remoteTime">Timestamp delivered from peer.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Init">
      <summary>First function which should be called before any other NetworkTransport function.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.IsBroadcastDiscoveryRunning">
      <summary>Check if broadcastdiscovery sender works.</summary>
      <returns>True if it works.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Receive(System.Int32@,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Delivered different network events to user. kConnectionEvent will notify about new connection established, kDisconnectEvent will report about disconnection happened, kDataEvent will report about new information delivered. Use must represent buffer for delivered data.</summary>
      <param name="hostId">Id of udp socket where event happened.</param>
      <param name="connectionId">Connection id for event.</param>
      <param name="channelId">Channel id for data event.</param>
      <param name="buffer">Prepared incoming buffer.</param>
      <param name="bufferSize">Prepared buffer size.</param>
      <param name="receivedSize">Actually received length.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveFromHost(System.Int32,System.Int32@,System.Int32@,System.Byte[],System.Int32,System.Int32@,System.Byte@)">
      <summary>Similar to Receive() but will ask only provided host. It for example allows to mix server/client in the same game.</summary>
      <param name="hostId">Id of udp socket used to check for event.</param>
      <param name="connectionId">Connection id for event.</param>
      <param name="channelId">Channel id for data event.</param>
      <param name="buffer">Prepared incoming buffer.</param>
      <param name="bufferSize">Prepared buffer size.</param>
      <param name="receivedSize">Actually received length.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost(System.Int32,System.Byte@)">
      <summary>Function delivered relay group event for group owner.</summary>
      <param name="hostId">Id of udp socket used to check for event.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.RemoveHost(System.Int32)">
      <summary>Close opened socket, close all connection belonging this socket.</summary>
      <param name="hostId">If of opened udp socket.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Send(System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Send data to peer.</summary>
      <param name="hostId">Id of udp socket using for send.</param>
      <param name="connectionId">Id of connection.</param>
      <param name="channelId">If for channel.</param>
      <param name="buffer">Binary buffer containing data for sending.</param>
      <param name="size">Buffer size.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SendMulticast(System.Int32,System.Int32,System.Byte@)">
      <summary>Function adds another connection to multy peer sends.</summary>
      <param name="hostId">Id of udp socket used for sending.</param>
      <param name="connectionId">Connection id.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SetBroadcastCredentials(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte@)">
      <summary>Set credentials for received broadcast message. If one of credentials is wrong, received brodcast discovery message will drop.</summary>
      <param name="hostId">Id of the host whihc will receive broadcast discovery message.</param>
      <param name="key">Credential.</param>
      <param name="version">Credential.</param>
      <param name="subversion">Credential.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.SetPacketStat(System.Int32,System.Int32,System.Int32)">
      <summary>Used to inform the profiler of network packet statistics.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.Shutdown">
      <summary>Shutdown the transport layer, after calling this function no any other function can be called.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartBroadcastDiscovery(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte@)">
      <summary>Function starts send broadcasting message in all local subnets.</summary>
      <param name="hostId">Host id which should be reported via broadcast (broadcast receivers will connect to this host).</param>
      <param name="broadcastPort">Port using for broadcast message (usuall port of broadcast receivers).</param>
      <param name="key">Part of credentials, if key of receiver will not be equal to key of sender broadcast message will drop.</param>
      <param name="version">Part of credentials.</param>
      <param name="subversion">Part of credentials.</param>
      <param name="buffer">Complimentary message. This message will delivered to receiver with Broadcast event.</param>
      <param name="size">Size of message.</param>
      <param name="timeout">How often broadcast message shoule be sent (ms).</param>
      <param name="error">Error.</param>
      <returns>Return true if broadcasting request has been submitted.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StartSendMulticast(System.Int32,System.Int32,System.Byte[],System.Int32,System.Byte@)">
      <summary>Start process sending message per group of connected connection.</summary>
      <param name="hostId">Id of udp socket used to establish connection.</param>
      <param name="channelId">First connection id from group connection.</param>
      <param name="buffer">Data buffer.</param>
      <param name="size">Data buffer length.</param>
      <param name="error">Possible error.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkTransport.StopBroadcastDiscovery">
      <summary>Stop sending broadcast discovery message.</summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkWriter.Position">
      <summary>The current position of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor">
      <summary>Creates a new NetworkWriter object.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor(System.Byte[])">
      <summary>Creates a new NetworkWriter object.</summary>
      <param name="buffer">A buffer to write into. This is not copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.AsArray">
      <summary>Returns the internal array of bytes the writer is using. This is NOT a copy.</summary>
      <returns>Internal buffer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.FinishMessage">
      <summary>This fills out the size header of a message begun with StartMessage(), so that it can be send using Send() functions.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.SeekZero">
      <summary>Seeks to the start of the internal buffer.</summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.StartMessage(System.Int16)">
      <summary>This begins a new message, which should be completed with FinishMessage() once the payload has been written.</summary>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.ToArray">
      <summary>Returns a copy of internal array of bytes the writer is using, it copies only the bytes used.</summary>
      <returns>Copy of data used by the writer.</returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.GameObject)">
      <summary>This writes the a reference to a GameObject with a NetworkIdentity component to the stream. The object should have been spawned for clients to know about it.</summary>
      <param name="value">The GameObject to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesAndSize(System.Byte[],System.Int32)">
      <summary>This writes a 16-bit count and a array of bytes of that length to the stream.</summary>
      <param name="buffer">Array of bytes to write.</param>
      <param name="count">Number of bytes from the array to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesFull(System.Byte[])">
      <summary>
        <para>This writes a 16-bit count and an array of bytes of that size to the stream.</para>
        <para>Note that this will be the full allocated size of the array. So if the array is partially filled with data to send - then you should be using WriteBytesAndSize instead.</para>
      </summary>
      <param name="buffer">Bytes to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt32(System.UInt32)">
      <summary>This writes the 32-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt64(System.UInt64)">
      <summary>This writes the 64-bit value to the stream using variable-length-encoding.</summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.MaxPlayersPerClient">
      <summary>The maximum number of local players that a client connection can have.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.gameObject">
      <summary>The game object for this player.</summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerController.IsValid">
      <summary>Checks if this PlayerController has an actual player attached to it.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.playerControllerId">
      <summary>The local player ID number of this player.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.unetView">
      <summary>The NetworkIdentity component of the player.</summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerController.ToString">
      <summary>String representation of the player objects state.</summary>
      <returns>String with the object state.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Add``1(``0)">
      <summary>Same as List:Add() but the item is added on clients.</summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Clear">
      <summary>Same as List:Clear() but the list is cleared on clients.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.DeserializeItem``1(UnityEngine.Networking.NetworkReader)">
      <summary>This method is used when deserializing SyncList items from a stream.</summary>
      <param name="reader">Stream to read from.</param>
      <returns>New instance of the SyncList value type.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Dirty(System.Int32)">
      <summary>Marks an item in the list as dirty, so it will be updated on clients.</summary>
      <param name="index">Index of item to dirty.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.SyncList&lt;T0&gt;.HandleMsg``1(System.Byte,System.Int32,``0)">
      <summary>Internal function used for remote list operations.</summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.InitializeBehaviour(UnityEngine.Networking.NetworkBehaviour,System.Int32)">
      <summary>Internal function.</summary>
      <param name="beh">The behaviour the list belongs to.</param>
      <param name="cmdHash">Identifies this list.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Insert``1(System.Int32,``0)">
      <summary>Same as List::Insert() but also inserts into list on clients.</summary>
      <param name="index">Where to insert the item.</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.Remove``1(``0)">
      <summary>Same as List:Remove except removes on clients also.</summary>
      <param name="item">Item to remove.</param>
      <returns>Success if removed.</returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.RemoveAt(System.Int32)">
      <summary>Same as List:Remove except it removes the index on clients also.</summary>
      <param name="index">Index to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList``1.SerializeItem``1(UnityEngine.Networking.NetworkWriter,``0)">
      <summary>This is used to write a value object from a SyncList to a stream.</summary>
      <param name="writer">Stream to write to.</param>
      <param name="item">Item to write.</param>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPendingBuffers">
      <summary>
        <para>The option to set the numbet of pending buffers for a channel.</para>
        <para>These buffers are allocated dynamically as required when writes to the transport layer fail. Each buffer will be the size of maxPacketSize for the channel - usually around 1400 bytes. The default is 16 buffers.This only applies to reliable channels. If a reliable channel runs out of pnding buffers, data will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Developer">
      <summary>Show log messages with priority Developer and higher, this it the most verbose setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Debug">
      <summary>Show log messages with priority Debug and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Info">
      <summary>Show log messages with priority Info and higher. This is the default setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Warn">
      <summary>Show log messages with priority Warning and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Error">
      <summary>Show log messages with priority Error and higher.</summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Fatal">
      <summary>Show log messages with priority Fatal and higher. this is the least verbose setting.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Ok">
      <summary>Everything good so far.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongHost">
      <summary>Host doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongConnection">
      <summary>Connection doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongChannel">
      <summary>Channel doesn't exist.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.NoResources">
      <summary>No internal resources ro acomplish request.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.BadMessage">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.Timeout">
      <summary>Timeout happened.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.MessageToLong">
      <summary>Sending message too long to fit internal buffers, or user doesn't present buffer with length enouf to contain receiving message.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.WrongOperation">
      <summary>Operation is not supported.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.VersionMismatch">
      <summary>Different version of protocol on ends of connection.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.CRCMismatch">
      <summary>Two ends of connection have different agreement about channels, channels qos and network parameters.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkError.DNSFailure">
      <summary>The address supplied to connect to was invalid or could not be resolved.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DataEvent">
      <summary>New data come in.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.ConnectEvent">
      <summary>New connection has been connected.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.DisconnectEvent">
      <summary>Connection has been disconnected.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.Nothing">
      <summary>Nothing happened.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkEventType.BroadcastEvent">
      <summary>Broadcast discovery event received. To obtain sender connection info and possible complimentary message from him call GetBroadcastConnectionInfo() and GetBroadcastConnectionMessage() functions.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D">
      <summary>Use 3D physics to determine proximity.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D">
      <summary>Use 2D physics to determine proximity.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.None">
      <summary>Do not sync.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX">
      <summary>Only x axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY">
      <summary>Only the y axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ">
      <summary>Only the z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY">
      <summary>The x and y axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ">
      <summary>The x and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ">
      <summary>The y and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ">
      <summary>The x, y and z axis.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None">
      <summary>Do not compress.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low">
      <summary>A low amount of compression that preserves accuracy.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High">
      <summary>High Compression - sacrificing accuracy.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone">
      <summary>Dont synchronize.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform">
      <summary>Sync using the game object's base transform.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D">
      <summary>Sync using the <see cref="T:UnityEngine.Rigidbody2D" /> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D">
      <summary>Sync using the <see cref="T:UnityEngine.Rigidbody" /> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController">
      <summary>Sync using the <see cref="T:UnityEngine.CharacterController" /> component.</summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.Random">
      <summary>
        <para>Spawn players at a randomly chosen starting position.</para>
        <para>A NetworkStartPosition will be randomly chosen by the NetworkManager from the set of NetworkStartPositions in the current scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.RoundRobin">
      <summary>
        <para>Spawn players at the next start position.</para>
        <para>The NetworkManager will spawn players at each NetworkStartPosition in the scene on a round-robin basis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Unreliable">
      <summary>Just sending message, no grants.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableFragmented">
      <summary>The same as unreliable, but big message (up to 32 fragment per message) can be sent.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.UnreliableSequenced">
      <summary>The same as unrelaible but all unorder messages will be dropped. Example: VoIP.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.Reliable">
      <summary>Channel will be configured as relaiable, each message sent in this channel will be delivered or connection will be disconnected.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableFragmented">
      <summary>Same as reliable, but big messages are allowed (up to 32 fragment with fragmentsize each for message).</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableSequenced">
      <summary>The same as reliable, but with granting message order.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.StateUpdate">
      <summary>Unreliable, only last message in send buffer will be sent, only most recent message in reading buffer will be delivered.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.ReliableStateUpdate">
      <summary>The same as StateUpdate, but reliable.</summary>
    </member>
    <member name="F:UnityEngine.Networking.QosType.AllCostDelivery">
      <summary>Reliable message will resend almost with each frame, without waiting delivery notification. usefull for important urgent short messages, like a shoot.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.SelectReactor">
      <summary>Network thread will sleep up to threadawake timeout, or up to receive event on socket will happened. Awaked thread will try to read up to maxpoolsize packets from socket and will try update connections ready to send (with fixing awaketimeout rate).</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.FixRateReactor">
      <summary>Network thread will sleep up to threadawake timeout, after that it will try receive up to maxpoolsize amount of messages and then will try perform send operation for connection whihc ready to send.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ReactorModel.">
      <summary>Network layer should be updated from main thread by using NetworkUpdate function.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_ADD">
      <summary>Item was added to the list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_CLEAR">
      <summary>The list was cleared.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_INSERT">
      <summary>An item was inserted into the list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_REMOVE">
      <summary>An item was removed from the list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_REMOVEAT">
      <summary>An item was removed at an index from the list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_SET">
      <summary>An item was set to a new value in the list.</summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_DIRTY">
      <summary>An item in the list was manually marked dirty.</summary>
    </member>
    <member name="F:UnityEngine.Networking.Version.Current">
      <summary>The current UNET version.</summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientRpcAttribute.channel">
      <summary>The channel ID which this RPC transmission will use.</summary>
    </member>
    <member name="F:UnityEngine.Networking.CommandAttribute.channel">
      <summary>The QoS channel to use to send this command on, see <see cref="T:UnityEngine.Networking.QosType" />.</summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.channel">
      <summary>
        <para>The QoS channel to use for updates for this script.</para>
        <para>Updates for SyncVar variables will be sent on the specified QoS channel. The default channel for scripts is zero.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.sendInterval">
      <summary>
        <para>The sendInterval control how frequently updates are sent for this script.</para>
        <para>If sendInterval is zero, updates will be sent at the end of the frame when dirty bits are set for that script. Note that setting the value of a SyncVar will automatically set dirty bits.If sendInterval is non-zero, updates are deferred until sendInterval seconds have passed since the last update for that script. So it can be used as a throttle in cases where the Sync value is changing constantly on the server, but you don't want it to be updated every frame.The default sendInterval for scripts is 0.1f seconds.The send interval can also be customized by implementing the virtual function GetNetworkSendInterval() on NetworkBehaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncEventAttribute.channel">
      <summary>
        <para>The UNET QoS channel that this event should be sent on.</para>
        <para>This defaults to zero - the default reliable channel. This can be used to make events that are not essential for game play (such as effects) unreliable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncVarAttribute.hook">
      <summary>The hook attribute can be used to specify a function to be called when the sync var changes value on the client.</summary>
    </member>
  </members>
</doc>